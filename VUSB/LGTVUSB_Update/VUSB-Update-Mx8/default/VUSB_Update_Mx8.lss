
VUSB_Update_Mx8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000ae6  00000b7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  00800104  00800104  00000b7e  2**0
                  ALLOC
  3 .debug_aranges 000001d0  00000000  00000000  00000b80  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006e1  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013cf  00000000  00000000  00001431  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000548  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000132e  00000000  00000000  00002d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000510  00000000  00000000  00004078  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000906  00000000  00000000  00004588  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000653  00000000  00000000  00004e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000270  00000000  00000000  000054e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 23 03 	jmp	0x646	; 0x646 <__vector_1>
   8:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__vector_2>
   c:	0c 94 df 04 	jmp	0x9be	; 0x9be <__vector_3>
  10:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__vector_4>
  14:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__vector_5>
  18:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__vector_6>
  1c:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__vector_7>
  20:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__vector_8>
  24:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__vector_9>
  28:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__vector_10>
  2c:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__vector_11>
  30:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__vector_12>
  34:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__vector_13>
  38:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__vector_14>
  3c:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__vector_15>
  40:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__vector_16>
  44:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__vector_17>
  48:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__vector_18>
  4c:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__vector_19>
  50:	0c 94 12 05 	jmp	0xa24	; 0xa24 <__vector_20>
  54:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__vector_21>
  58:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__vector_22>
  5c:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__vector_23>
  60:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__vector_24>
  64:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__vector_25>
#endif

.section .vectors,"ax",@progbits
	.weak __vector_26
	;.set __vector_26, __bad_interrupt
	XJMP  __vector_26
  68:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__vector_26>
	.weak __vector_27
	;.set __vector_27, __bad_interrupt
	XJMP  __vector_27
  6c:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__vector_27>
	.weak __vector_28
	;.set __vector_28, __bad_interrupt
	XJMP  __vector_28
  70:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__vector_28>
	.weak __vector_29
	;.set __vector_29, __bad_interrupt
	XJMP  __vector_29
  74:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__vector_29>

00000078 <usbDescriptorString0>:
  78:	04 03 09 04                                         ....

0000007c <usbDescriptorStringVendor>:
  7c:	12 03 4c 00 47 00 54 00 49 00 43 00 20 00 20 00     ..L.G.T.I.C. . .
  8c:	20 00                                                .

0000008e <usbDescriptorStringDevice>:
  8e:	12 03 56 00 55 00 70 00 64 00 61 00 74 00 65 00     ..V.U.p.d.a.t.e.
  9e:	20 00                                                .

000000a0 <usbDescriptorDevice>:
  a0:	12 01 10 01 ff 00 00 08 c0 27 dc 15 00 01 01 02     .........'......
  b0:	00 01                                               ..

000000b2 <usbDescriptorConfiguration>:
  b2:	09 02 12 00 01 01 00 80 32 09 04 00 00 00 00 00     ........2.......
	...

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e6 ee       	ldi	r30, 0xE6	; 230
  d8:	fa e0       	ldi	r31, 0x0A	; 10
  da:	02 c0       	rjmp	.+4      	; 0xe0 <.do_copy_data_start>

000000dc <.do_copy_data_loop>:
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0

000000e0 <.do_copy_data_start>:
  e0:	a4 30       	cpi	r26, 0x04	; 4
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <.do_copy_data_loop>

000000e6 <__do_clear_bss>:
  e6:	11 e0       	ldi	r17, 0x01	; 1
  e8:	a4 e0       	ldi	r26, 0x04	; 4
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	aa 33       	cpi	r26, 0x3A	; 58
  f2:	b1 07       	cpc	r27, r17
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
  f6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <main>
  fa:	0c 94 71 05 	jmp	0xae2	; 0xae2 <_exit>

000000fe <__bad_interrupt>:
  fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <app_entry>:
void app_entry(void)
{
	unsigned int i;
	
	//PMCR = (1 << OSCE) | (1 << OSCS);
	asm("push r24\n\t"		
 102:	8f 93       	push	r24
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	80 93 f2 00 	sts	0x00F2, r24
 10a:	85 e8       	ldi	r24, 0x85	; 133
 10c:	80 93 f2 00 	sts	0x00F2, r24
 110:	8f 91       	pop	r24
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
		"ldi  r24, 0x85\n\r"			
		"sts  0xf2,  r24\n\r" 	
		"pop  r24\n\t"			
		::); 
	for(i = 0; i < 200; i++)
		asm("nop");
 116:	00 00       	nop
		"sts  0xf2,  r24\n\r" 
		"ldi  r24, 0x85\n\r"			
		"sts  0xf2,  r24\n\r" 	
		"pop  r24\n\t"			
		::); 
	for(i = 0; i < 200; i++)
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	88 3c       	cpi	r24, 0xC8	; 200
 11c:	91 05       	cpc	r25, r1
 11e:	d9 f7       	brne	.-10     	; 0x116 <app_entry+0x14>
		asm("nop");

	//PMCR = (1 << RC16MEN) | (0 << OSCMEN);
	asm("push r24\n\t"		
 120:	8f 93       	push	r24
 122:	80 e8       	ldi	r24, 0x80	; 128
 124:	80 93 f2 00 	sts	0x00F2, r24
 128:	81 e8       	ldi	r24, 0x81	; 129
 12a:	80 93 f2 00 	sts	0x00F2, r24
 12e:	8f 91       	pop	r24
		"sts  0xf2,  r24\n\r" 	
		"pop  r24\n\t"			
		::); 
	
	//
	asm("cli");
 130:	f8 94       	cli
	//关闭外部中断
	USB_INTR_ENABLE = 0;
 132:	1d ba       	out	0x1d, r1	; 29
	USB_INTR_CFG = 0;
 134:	10 92 69 00 	sts	0x0069, r1
	//关闭内部上拉
	MCUCR |= (1 << PUD);
 138:	85 b7       	in	r24, 0x35	; 53
 13a:	80 61       	ori	r24, 0x10	; 16
 13c:	85 bf       	out	0x35, r24	; 53
	//将DP DM置为界输入
	USBDDR &= ~((1 << USB_CFG_DPLUS_BIT) | (1 << USB_CFG_DMINUS_BIT)); 
 13e:	8a b1       	in	r24, 0x0a	; 10
 140:	8b 7e       	andi	r24, 0xEB	; 235
 142:	8a b9       	out	0x0a, r24	; 10
	USBOUT &= ~((1 << USB_CFG_DPLUS_BIT) | (1 << USB_CFG_DMINUS_BIT)); 
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	8b 7e       	andi	r24, 0xEB	; 235
 148:	8b b9       	out	0x0b, r24	; 11
	//应用程序入口
	asm("rjmp 0xc00");
 14a:	db c5       	rjmp	.+2998   	; 0xd02 <ex_vector_29+0xca>
}
 14c:	08 95       	ret

0000014e <usbFunctionWrite>:
	return len;
}

// 写FLASH的数据接收
uchar usbFunctionWrite(uchar *data, uchar len) 
{
 14e:	dc 01       	movw	r26, r24
 150:	26 2f       	mov	r18, r22
 152:	30 91 0c 01 	lds	r19, 0x010C
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	08 c0       	rjmp	.+16     	; 0x16a <usbFunctionWrite+0x1c>
	uchar i;
	uchar *pBuf = (uchar *)datBuffer;
	
	for(i = 0; i < len; i++)
	{
		pBuf[datIndex++] = *data++;
 15a:	e9 2f       	mov	r30, r25
 15c:	e3 0f       	add	r30, r19
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	e0 50       	subi	r30, 0x00	; 0
 162:	fe 4f       	sbci	r31, 0xFE	; 254
 164:	8d 91       	ld	r24, X+
 166:	80 83       	st	Z, r24
{
	uchar retVal = 0;
	uchar i;
	uchar *pBuf = (uchar *)datBuffer;
	
	for(i = 0; i < len; i++)
 168:	9f 5f       	subi	r25, 0xFF	; 255
 16a:	92 17       	cp	r25, r18
 16c:	b0 f3       	brcs	.-20     	; 0x15a <usbFunctionWrite+0xc>
 16e:	82 2f       	mov	r24, r18
 170:	83 0f       	add	r24, r19
 172:	80 93 0c 01 	sts	0x010C, r24
	{
		pBuf[datIndex++] = *data++;
	}

	if((datIndex >= f_len) || (len < 8))
 176:	68 2f       	mov	r22, r24
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	80 91 0a 01 	lds	r24, 0x010A
 17e:	90 91 0b 01 	lds	r25, 0x010B
 182:	68 17       	cp	r22, r24
 184:	79 07       	cpc	r23, r25
 186:	20 f4       	brcc	.+8      	; 0x190 <usbFunctionWrite+0x42>
 188:	28 30       	cpi	r18, 0x08	; 8
 18a:	10 f0       	brcs	.+4      	; 0x190 <usbFunctionWrite+0x42>
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	08 95       	ret
	{
		if(prog_state == E_PROG_WRITE_IM)
 190:	80 91 0d 01 	lds	r24, 0x010D
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	79 f4       	brne	.+30     	; 0x1b6 <usbFunctionWrite+0x68>
		{
			if(f_addr >= 0xc00)
 198:	80 91 08 01 	lds	r24, 0x0108
 19c:	90 91 09 01 	lds	r25, 0x0109
 1a0:	2c e0       	ldi	r18, 0x0C	; 12
 1a2:	80 30       	cpi	r24, 0x00	; 0
 1a4:	92 07       	cpc	r25, r18
 1a6:	20 f0       	brcs	.+8      	; 0x1b0 <usbFunctionWrite+0x62>
				DrvEEPROM_ProgFlashHWord(f_addr, datIndex, (unsigned char *)datBuffer);
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	52 e0       	ldi	r21, 0x02	; 2
 1ac:	0e 94 70 04 	call	0x8e0	; 0x8e0 <DrvEEPROM_ProgFlashHWord>
			prog_state = E_PROG_IDLE;
 1b0:	10 92 0d 01 	sts	0x010D, r1
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <usbFunctionWrite+0x6c>
		}
		else if(prog_state == E_PROG_WRITE)
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	11 f0       	breq	.+4      	; 0x1be <usbFunctionWrite+0x70>
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	08 95       	ret
			prog_state = E_PROG_WAIT;
 1be:	84 e0       	ldi	r24, 0x04	; 4
 1c0:	80 93 0d 01 	sts	0x010D, r24
 1c4:	81 e0       	ldi	r24, 0x01	; 1
		retVal = 1;
	}
	
	return retVal;
}
 1c6:	08 95       	ret

000001c8 <main>:
	GPIOR0 = 0;
#endif

	u8 u8Reg = 0xff;

	PORTD |= 0x1;
 1c8:	58 9a       	sbi	0x0b, 0	; 11
	asm("nop");
 1ca:	00 00       	nop
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
	for(i = 0; i < 0x40; i++)
		u8Reg &= PIND;
 1d0:	89 b1       	in	r24, 0x09	; 9
 1d2:	28 23       	and	r18, r24

	u8 u8Reg = 0xff;

	PORTD |= 0x1;
	asm("nop");
	for(i = 0; i < 0x40; i++)
 1d4:	9f 5f       	subi	r25, 0xFF	; 255
 1d6:	90 34       	cpi	r25, 0x40	; 64
 1d8:	d9 f7       	brne	.-10     	; 0x1d0 <main+0x8>
		u8Reg &= PIND;
	PORTD = 0;
 1da:	1b b8       	out	0x0b, r1	; 11
	if(!(u8Reg & 0x1))
 1dc:	20 fd       	sbrc	r18, 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <main+0x1c>
	{
		PORTD = 0;
 1e0:	1b b8       	out	0x0b, r1	; 11
		asm("rjmp .ex_entry");
 1e2:	0e c5       	rjmp	.+2588   	; 0xc00 <ex_entry>
#if USB_INT_USBD_EXTERNAL == 1
	GPIOR0 = 0x1;
#endif		
	
// a. PC0/1 input, disaple PC0/1's pull-register
	DDRC = DDRC & 0xFC;
 1e4:	87 b1       	in	r24, 0x07	; 7
 1e6:	8c 7f       	andi	r24, 0xFC	; 252
 1e8:	87 b9       	out	0x07, r24	; 7

	// b. enable external crystal oscillator
	//PMCR = (1 << RC16MEN) | (1 << OSCMEN);
	
	asm("push r24\n\t"		
 1ea:	8f 93       	push	r24
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	80 93 f2 00 	sts	0x00F2, r24
 1f2:	85 e8       	ldi	r24, 0x85	; 133
 1f4:	80 93 f2 00 	sts	0x00F2, r24
 1f8:	8f 91       	pop	r24
//	}
	// d. switch clock from RC to External OSC
	//PMCR = (1 << RC16MEN) | (1 << OSCMEN) | (1 << EXTMSEL);
	// e. disable internal RC
	//PMCR = (1 << OSCE) | (1 << OSCS);
	asm("push r24\n\t"		
 1fa:	8f 93       	push	r24
 1fc:	80 e8       	ldi	r24, 0x80	; 128
 1fe:	80 93 f2 00 	sts	0x00F2, r24
 202:	85 ea       	ldi	r24, 0xA5	; 165
 204:	80 93 f2 00 	sts	0x00F2, r24
 208:	8f 91       	pop	r24
		"pop  r24\n\t"			
		::); 

	//OSCCAL = 0xa;
	// f.
	CLKPR = 0x80;
 20a:	80 e8       	ldi	r24, 0x80	; 128
 20c:	80 93 61 00 	sts	0x0061, r24
	CLKPR = 0x80;
 210:	80 93 61 00 	sts	0x0061, r24
 
    //wdt_enable(WDTO_1S); // enable 1s watchdog timer 

	usbInit(); 
 214:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <usbInit>
 	
    usbDeviceDisconnect(); 	// enforce re-enumeration 
 218:	54 9a       	sbi	0x0a, 4	; 10
 21a:	80 e0       	ldi	r24, 0x00	; 0
    for(i = 0; i<10; i++)  // wait 500 ms 
    {
        wdt_reset(); 		// keep the watchdog happy 
 21c:	a8 95       	wdr
    //wdt_enable(WDTO_1S); // enable 1s watchdog timer 

	usbInit(); 
 	
    usbDeviceDisconnect(); 	// enforce re-enumeration 
    for(i = 0; i<10; i++)  // wait 500 ms 
 21e:	8f 5f       	subi	r24, 0xFF	; 255
 220:	8a 30       	cpi	r24, 0x0A	; 10
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x54>
    {
        wdt_reset(); 		// keep the watchdog happy 
       // _delay_ms(2); 
    } 
    usbDeviceConnect(); 
 224:	54 98       	cbi	0x0a, 4	; 10
 
    sei(); 					// Enable interrupts after re-enumeration 
 226:	78 94       	sei
 
   	prog_state = E_PROG_IDLE;
 228:	10 92 0d 01 	sts	0x010D, r1
	dev_state = E_DEV_OFF;
 22c:	10 92 0e 01 	sts	0x010E, r1
	timeout = 0;
	timeout1 = 0;
    while(1) 
	{ 
        //wdt_reset(); 		// keep the watchdog happy 
        usbPoll(); 
 230:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <usbPoll>

		// 延迟写和擦FLASH阶段
		if(prog_state == E_PROG_WAIT)
 234:	80 91 0d 01 	lds	r24, 0x010D
 238:	84 30       	cpi	r24, 0x04	; 4
 23a:	b9 f4       	brne	.+46     	; 0x26a <main+0xa2>
		{
			if(usbCurrentTok == 0x0)
 23c:	80 91 11 01 	lds	r24, 0x0111
 240:	88 23       	and	r24, r24
 242:	b1 f7       	brne	.-20     	; 0x230 <main+0x68>
			{
				if(f_addr >= 0xc00)
 244:	80 91 08 01 	lds	r24, 0x0108
 248:	90 91 09 01 	lds	r25, 0x0109
 24c:	2c e0       	ldi	r18, 0x0C	; 12
 24e:	80 30       	cpi	r24, 0x00	; 0
 250:	92 07       	cpc	r25, r18
 252:	d8 f0       	brcs	.+54     	; 0x28a <main+0xc2>
					DrvEEPROM_ProgFlashHWord(f_addr, f_len >> 1, (unsigned char *)datBuffer);
 254:	60 91 0a 01 	lds	r22, 0x010A
 258:	70 91 0b 01 	lds	r23, 0x010B
 25c:	76 95       	lsr	r23
 25e:	67 95       	ror	r22
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	52 e0       	ldi	r21, 0x02	; 2
 264:	0e 94 70 04 	call	0x8e0	; 0x8e0 <DrvEEPROM_ProgFlashHWord>
 268:	10 c0       	rjmp	.+32     	; 0x28a <main+0xc2>
				prog_state = E_PROG_IDLE;
			}
		}
		else if (prog_state == E_PROG_ERASE)
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	09 f7       	brne	.-62     	; 0x230 <main+0x68>
		{
			if(usbCurrentTok == 0x0)
 26e:	80 91 11 01 	lds	r24, 0x0111
 272:	88 23       	and	r24, r24
 274:	e9 f6       	brne	.-70     	; 0x230 <main+0x68>
			{
				if(f_addr >= 0xc00)
 276:	80 91 08 01 	lds	r24, 0x0108
 27a:	90 91 09 01 	lds	r25, 0x0109
 27e:	2c e0       	ldi	r18, 0x0C	; 12
 280:	80 30       	cpi	r24, 0x00	; 0
 282:	92 07       	cpc	r25, r18
 284:	10 f0       	brcs	.+4      	; 0x28a <main+0xc2>
					DrvEEPROM_EraseFlashPage(f_addr);
 286:	0e 94 98 04 	call	0x930	; 0x930 <DrvEEPROM_EraseFlashPage>
				prog_state = E_PROG_IDLE;
 28a:	10 92 0d 01 	sts	0x010D, r1
 28e:	d0 cf       	rjmp	.-96     	; 0x230 <main+0x68>

00000290 <usbFunctionRead>:

}

// 读 FLASH
uchar usbFunctionRead(uchar *data, uchar len) 
{
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	ac 01       	movw	r20, r24
 298:	f6 2e       	mov	r15, r22
	DrvEEPROM_ReadFWord(f_addr, len,(unsigned int *)data);
 29a:	06 2f       	mov	r16, r22
 29c:	10 e0       	ldi	r17, 0x00	; 0
 29e:	80 91 08 01 	lds	r24, 0x0108
 2a2:	90 91 09 01 	lds	r25, 0x0109
 2a6:	b8 01       	movw	r22, r16
 2a8:	0e 94 b3 04 	call	0x966	; 0x966 <DrvEEPROM_ReadFWord>
	f_addr += len;
 2ac:	80 91 08 01 	lds	r24, 0x0108
 2b0:	90 91 09 01 	lds	r25, 0x0109
 2b4:	80 0f       	add	r24, r16
 2b6:	91 1f       	adc	r25, r17
 2b8:	90 93 09 01 	sts	0x0109, r25
 2bc:	80 93 08 01 	sts	0x0108, r24
	f_len -= len;
 2c0:	80 91 0a 01 	lds	r24, 0x010A
 2c4:	90 91 0b 01 	lds	r25, 0x010B
 2c8:	80 1b       	sub	r24, r16
 2ca:	91 0b       	sbc	r25, r17
 2cc:	90 93 0b 01 	sts	0x010B, r25
 2d0:	80 93 0a 01 	sts	0x010A, r24
	return len;
}
 2d4:	8f 2d       	mov	r24, r15
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	ff 90       	pop	r15
 2dc:	08 95       	ret

000002de <usbFunctionSetup>:

static ENUM_DEV_STATE dev_state;

//命令接收
USB_PUBLIC uchar usbFunctionSetup(uchar data [ 8 ])
{
 2de:	fc 01       	movw	r30, r24
	uchar len;
	 
	switch(data[1])  // custom command is in the bRequest field 
 2e0:	81 81       	ldd	r24, Z+1	; 0x01
 2e2:	85 30       	cpi	r24, 0x05	; 5
 2e4:	49 f1       	breq	.+82     	; 0x338 <usbFunctionSetup+0x5a>
 2e6:	86 30       	cpi	r24, 0x06	; 6
 2e8:	40 f4       	brcc	.+16     	; 0x2fa <usbFunctionSetup+0x1c>
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	a9 f0       	breq	.+42     	; 0x318 <usbFunctionSetup+0x3a>
 2ee:	84 30       	cpi	r24, 0x04	; 4
 2f0:	08 f5       	brcc	.+66     	; 0x334 <usbFunctionSetup+0x56>
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <usbFunctionSetup+0x1a>
 2f6:	6f c0       	rjmp	.+222    	; 0x3d6 <usbFunctionSetup+0xf8>
 2f8:	0a c0       	rjmp	.+20     	; 0x30e <usbFunctionSetup+0x30>
 2fa:	8a 30       	cpi	r24, 0x0A	; 10
 2fc:	09 f4       	brne	.+2      	; 0x300 <usbFunctionSetup+0x22>
 2fe:	3f c0       	rjmp	.+126    	; 0x37e <usbFunctionSetup+0xa0>
 300:	8b 30       	cpi	r24, 0x0B	; 11
 302:	09 f4       	brne	.+2      	; 0x306 <usbFunctionSetup+0x28>
 304:	4e c0       	rjmp	.+156    	; 0x3a2 <usbFunctionSetup+0xc4>
 306:	86 30       	cpi	r24, 0x06	; 6
 308:	09 f0       	breq	.+2      	; 0x30c <usbFunctionSetup+0x2e>
 30a:	65 c0       	rjmp	.+202    	; 0x3d6 <usbFunctionSetup+0xf8>
 30c:	2b c0       	rjmp	.+86     	; 0x364 <usbFunctionSetup+0x86>
	{
	case USB_SYNC:
		replyBuffer[0] = 'I';
 30e:	89 e4       	ldi	r24, 0x49	; 73
 310:	80 93 04 01 	sts	0x0104, r24
 314:	21 e0       	ldi	r18, 0x01	; 1
 316:	60 c0       	rjmp	.+192    	; 0x3d8 <usbFunctionSetup+0xfa>
		len = 1;
		break;
	case USB_ERASE_PAGE:
		prog_state = E_PROG_ERASE;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 0d 01 	sts	0x010D, r24
		f_addr = (data[3] << 8) | data[2];
 31e:	93 81       	ldd	r25, Z+3	; 0x03
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	22 81       	ldd	r18, Z+2	; 0x02
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	82 2b       	or	r24, r18
 328:	93 2b       	or	r25, r19
 32a:	90 93 09 01 	sts	0x0109, r25
 32e:	80 93 08 01 	sts	0x0108, r24
 332:	51 c0       	rjmp	.+162    	; 0x3d6 <usbFunctionSetup+0xf8>
		len = 0;
		break;
	case USB_WRITE_ROM:
		prog_state = E_PROG_WRITE;
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	36 c0       	rjmp	.+108    	; 0x3a4 <usbFunctionSetup+0xc6>
		f_len  = (data[7] << 8) | data[6];
		len = 0xff;
		datIndex = 0;
		break;
	case USB_READ_ROM:
		f_addr = (data[3] << 8) | data[2];
 338:	93 81       	ldd	r25, Z+3	; 0x03
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	22 81       	ldd	r18, Z+2	; 0x02
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	82 2b       	or	r24, r18
 342:	93 2b       	or	r25, r19
 344:	90 93 09 01 	sts	0x0109, r25
 348:	80 93 08 01 	sts	0x0108, r24
		f_len  = (data[7] << 8) | data[6];
 34c:	97 81       	ldd	r25, Z+7	; 0x07
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	26 81       	ldd	r18, Z+6	; 0x06
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	82 2b       	or	r24, r18
 356:	93 2b       	or	r25, r19
 358:	90 93 0b 01 	sts	0x010B, r25
 35c:	80 93 0a 01 	sts	0x010A, r24
 360:	2f ef       	ldi	r18, 0xFF	; 255
 362:	3a c0       	rjmp	.+116    	; 0x3d8 <usbFunctionSetup+0xfa>
		len = 0xff;
		break;
	case USB_READ_ID:
		dev_state = E_DEV_ON;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	80 93 0e 01 	sts	0x010E, r24
		DrvEEPROM_ReadFWord(0x1ffc, 2, (unsigned int *)replyBuffer);
 36a:	8c ef       	ldi	r24, 0xFC	; 252
 36c:	9f e1       	ldi	r25, 0x1F	; 31
 36e:	62 e0       	ldi	r22, 0x02	; 2
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	44 e0       	ldi	r20, 0x04	; 4
 374:	51 e0       	ldi	r21, 0x01	; 1
 376:	0e 94 b3 04 	call	0x966	; 0x966 <DrvEEPROM_ReadFWord>
 37a:	24 e0       	ldi	r18, 0x04	; 4
 37c:	2d c0       	rjmp	.+90     	; 0x3d8 <usbFunctionSetup+0xfa>
		len = 4;
		break;
	case USB_ERASE_PAGE_IM:
		f_addr = (data[3] << 8) | data[2];
 37e:	93 81       	ldd	r25, Z+3	; 0x03
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	22 81       	ldd	r18, Z+2	; 0x02
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	28 2b       	or	r18, r24
 388:	39 2b       	or	r19, r25
 38a:	30 93 09 01 	sts	0x0109, r19
 38e:	20 93 08 01 	sts	0x0108, r18
		if(f_addr >= 0xc00)
 392:	8c e0       	ldi	r24, 0x0C	; 12
 394:	20 30       	cpi	r18, 0x00	; 0
 396:	38 07       	cpc	r19, r24
 398:	f0 f0       	brcs	.+60     	; 0x3d6 <usbFunctionSetup+0xf8>
			DrvEEPROM_EraseFlashPage(f_addr);
 39a:	c9 01       	movw	r24, r18
 39c:	0e 94 98 04 	call	0x930	; 0x930 <DrvEEPROM_EraseFlashPage>
 3a0:	1a c0       	rjmp	.+52     	; 0x3d6 <usbFunctionSetup+0xf8>
		len = 0;
		break;
	case USB_WRITE_ROM_IM:
		prog_state = E_PROG_WRITE_IM;
 3a2:	83 e0       	ldi	r24, 0x03	; 3
 3a4:	80 93 0d 01 	sts	0x010D, r24
		f_addr = (data[3] << 8) | data[2];
 3a8:	93 81       	ldd	r25, Z+3	; 0x03
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	22 81       	ldd	r18, Z+2	; 0x02
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	82 2b       	or	r24, r18
 3b2:	93 2b       	or	r25, r19
 3b4:	90 93 09 01 	sts	0x0109, r25
 3b8:	80 93 08 01 	sts	0x0108, r24
		f_len  = (data[7] << 8) | data[6];
 3bc:	97 81       	ldd	r25, Z+7	; 0x07
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	26 81       	ldd	r18, Z+6	; 0x06
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	82 2b       	or	r24, r18
 3c6:	93 2b       	or	r25, r19
 3c8:	90 93 0b 01 	sts	0x010B, r25
 3cc:	80 93 0a 01 	sts	0x010A, r24
		len = 0xff;
		datIndex = 0;
 3d0:	10 92 0c 01 	sts	0x010C, r1
 3d4:	c5 cf       	rjmp	.-118    	; 0x360 <usbFunctionSetup+0x82>
		break;
 3d6:	20 e0       	ldi	r18, 0x00	; 0
	default:
		len = 0;
		
	} 
 
	usbMsgPtr = replyBuffer;
 3d8:	84 e0       	ldi	r24, 0x04	; 4
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	90 93 20 01 	sts	0x0120, r25
 3e0:	80 93 1f 01 	sts	0x011F, r24
	
	return len; // should not get here 

}
 3e4:	82 2f       	mov	r24, r18
 3e6:	08 95       	ret

000003e8 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 3e8:	e9 e6       	ldi	r30, 0x69	; 105
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	83 60       	ori	r24, 0x03	; 3
 3f0:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 3f2:	e8 9a       	sbi	0x1d, 0	; 29
    usbTxLen1 = USBPID_NAK;
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 3f4:	08 95       	ret

000003f6 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 3fc:	60 91 21 01 	lds	r22, 0x0121
 400:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
 402:	67 fd       	sbrc	r22, 7
 404:	9b c0       	rjmp	.+310    	; 0x53c <usbPoll+0x146>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 406:	80 91 1e 01 	lds	r24, 0x011E
 40a:	cc e0       	ldi	r28, 0x0C	; 12
 40c:	d0 e0       	ldi	r29, 0x00	; 0
 40e:	c8 1b       	sub	r28, r24
 410:	d1 09       	sbc	r29, r1
 412:	cc 5d       	subi	r28, 0xDC	; 220
 414:	de 4f       	sbci	r29, 0xFE	; 254
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 416:	80 91 1d 01 	lds	r24, 0x011D
 41a:	8d 32       	cpi	r24, 0x2D	; 45
 41c:	09 f0       	breq	.+2      	; 0x420 <usbPoll+0x2a>
 41e:	7b c0       	rjmp	.+246    	; 0x516 <usbPoll+0x120>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 420:	68 30       	cpi	r22, 0x08	; 8
 422:	09 f0       	breq	.+2      	; 0x426 <usbPoll+0x30>
 424:	89 c0       	rjmp	.+274    	; 0x538 <usbPoll+0x142>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 426:	83 ec       	ldi	r24, 0xC3	; 195
 428:	80 93 12 01 	sts	0x0112, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 42c:	8a e5       	ldi	r24, 0x5A	; 90
 42e:	80 93 02 01 	sts	0x0102, r24
        usbMsgFlags = 0;
 432:	10 92 0f 01 	sts	0x010F, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 436:	88 81       	ld	r24, Y
 438:	80 76       	andi	r24, 0x60	; 96
 43a:	41 f0       	breq	.+16     	; 0x44c <usbPoll+0x56>
            replyLen = usbFunctionSetup(data);
 43c:	ce 01       	movw	r24, r28
 43e:	0e 94 6f 01 	call	0x2de	; 0x2de <usbFunctionSetup>
 442:	28 2f       	mov	r18, r24
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
 444:	8f 3f       	cpi	r24, 0xFF	; 255
 446:	09 f4       	brne	.+2      	; 0x44a <usbPoll+0x54>
 448:	55 c0       	rjmp	.+170    	; 0x4f4 <usbPoll+0xfe>
 44a:	5b c0       	rjmp	.+182    	; 0x502 <usbPoll+0x10c>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 44c:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 44e:	10 92 1b 01 	sts	0x011B, r1
    SWITCH_START(rq->bRequest)
 452:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 454:	88 23       	and	r24, r24
 456:	21 f4       	brne	.+8      	; 0x460 <usbPoll+0x6a>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 458:	10 92 1c 01 	sts	0x011C, r1
 45c:	22 e0       	ldi	r18, 0x02	; 2
 45e:	43 c0       	rjmp	.+134    	; 0x4e6 <usbPoll+0xf0>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 460:	85 30       	cpi	r24, 0x05	; 5
 462:	19 f4       	brne	.+6      	; 0x46a <usbPoll+0x74>
        usbNewDeviceAddr = value;
 464:	90 93 22 01 	sts	0x0122, r25
 468:	3d c0       	rjmp	.+122    	; 0x4e4 <usbPoll+0xee>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 46a:	86 30       	cpi	r24, 0x06	; 6
 46c:	61 f5       	brne	.+88     	; 0x4c6 <usbPoll+0xd0>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 46e:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	19 f4       	brne	.+6      	; 0x47a <usbPoll+0x84>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 474:	80 ea       	ldi	r24, 0xA0	; 160
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	16 c0       	rjmp	.+44     	; 0x4a6 <usbPoll+0xb0>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 47a:	82 30       	cpi	r24, 0x02	; 2
 47c:	19 f4       	brne	.+6      	; 0x484 <usbPoll+0x8e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 47e:	82 eb       	ldi	r24, 0xB2	; 178
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	11 c0       	rjmp	.+34     	; 0x4a6 <usbPoll+0xb0>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 484:	83 30       	cpi	r24, 0x03	; 3
 486:	d1 f4       	brne	.+52     	; 0x4bc <usbPoll+0xc6>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
 488:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
 48a:	88 23       	and	r24, r24
 48c:	41 f4       	brne	.+16     	; 0x49e <usbPoll+0xa8>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 48e:	88 e7       	ldi	r24, 0x78	; 120
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	90 93 20 01 	sts	0x0120, r25
 496:	80 93 1f 01 	sts	0x011F, r24
 49a:	24 e0       	ldi	r18, 0x04	; 4
 49c:	10 c0       	rjmp	.+32     	; 0x4be <usbPoll+0xc8>
        SWITCH_CASE(1)
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	41 f4       	brne	.+16     	; 0x4b2 <usbPoll+0xbc>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 4a2:	8c e7       	ldi	r24, 0x7C	; 124
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	90 93 20 01 	sts	0x0120, r25
 4aa:	80 93 1f 01 	sts	0x011F, r24
 4ae:	22 e1       	ldi	r18, 0x12	; 18
 4b0:	06 c0       	rjmp	.+12     	; 0x4be <usbPoll+0xc8>
        SWITCH_CASE(2)
 4b2:	82 30       	cpi	r24, 0x02	; 2
 4b4:	19 f4       	brne	.+6      	; 0x4bc <usbPoll+0xc6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 4b6:	8e e8       	ldi	r24, 0x8E	; 142
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	f5 cf       	rjmp	.-22     	; 0x4a6 <usbPoll+0xb0>
 4bc:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 4be:	80 e4       	ldi	r24, 0x40	; 64
 4c0:	80 93 0f 01 	sts	0x010F, r24
 4c4:	1e c0       	rjmp	.+60     	; 0x502 <usbPoll+0x10c>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 4c6:	88 30       	cpi	r24, 0x08	; 8
 4c8:	21 f4       	brne	.+8      	; 0x4d2 <usbPoll+0xdc>
 4ca:	21 e0       	ldi	r18, 0x01	; 1
 4cc:	83 e2       	ldi	r24, 0x23	; 35
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <usbPoll+0xf4>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 4d2:	89 30       	cpi	r24, 0x09	; 9
 4d4:	19 f4       	brne	.+6      	; 0x4dc <usbPoll+0xe6>
        usbConfiguration = value;
 4d6:	90 93 23 01 	sts	0x0123, r25
 4da:	04 c0       	rjmp	.+8      	; 0x4e4 <usbPoll+0xee>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 4dc:	8a 30       	cpi	r24, 0x0A	; 10
 4de:	11 f4       	brne	.+4      	; 0x4e4 <usbPoll+0xee>
 4e0:	21 e0       	ldi	r18, 0x01	; 1
 4e2:	01 c0       	rjmp	.+2      	; 0x4e6 <usbPoll+0xf0>
 4e4:	20 e0       	ldi	r18, 0x00	; 0
 4e6:	8b e1       	ldi	r24, 0x1B	; 27
 4e8:	91 e0       	ldi	r25, 0x01	; 1
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 4ea:	90 93 20 01 	sts	0x0120, r25
 4ee:	80 93 1f 01 	sts	0x011F, r24
 4f2:	07 c0       	rjmp	.+14     	; 0x502 <usbPoll+0x10c>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 4f4:	88 81       	ld	r24, Y
 4f6:	87 fd       	sbrc	r24, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
 4f8:	2e 81       	ldd	r18, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
 4fa:	80 e8       	ldi	r24, 0x80	; 128
 4fc:	80 93 0f 01 	sts	0x010F, r24
 500:	06 c0       	rjmp	.+12     	; 0x50e <usbPoll+0x118>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 502:	8f 81       	ldd	r24, Y+7	; 0x07
 504:	88 23       	and	r24, r24
 506:	19 f4       	brne	.+6      	; 0x50e <usbPoll+0x118>
 508:	8e 81       	ldd	r24, Y+6	; 0x06
 50a:	82 17       	cp	r24, r18
 50c:	08 f0       	brcs	.+2      	; 0x510 <usbPoll+0x11a>
 50e:	82 2f       	mov	r24, r18
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 510:	80 93 03 01 	sts	0x0103, r24
 514:	11 c0       	rjmp	.+34     	; 0x538 <usbPoll+0x142>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 516:	80 91 0f 01 	lds	r24, 0x010F
 51a:	87 ff       	sbrs	r24, 7
 51c:	0d c0       	rjmp	.+26     	; 0x538 <usbPoll+0x142>
            uchar rval = usbFunctionWrite(data, len);
 51e:	ce 01       	movw	r24, r28
 520:	0e 94 a7 00 	call	0x14e	; 0x14e <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
 524:	8f 3f       	cpi	r24, 0xFF	; 255
 526:	21 f4       	brne	.+8      	; 0x530 <usbPoll+0x13a>
                usbTxLen = USBPID_STALL;
 528:	8e e1       	ldi	r24, 0x1E	; 30
 52a:	80 93 02 01 	sts	0x0102, r24
 52e:	04 c0       	rjmp	.+8      	; 0x538 <usbPoll+0x142>
            }else if(rval != 0){    /* This was the final package */
 530:	88 23       	and	r24, r24
 532:	11 f0       	breq	.+4      	; 0x538 <usbPoll+0x142>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
 534:	10 92 03 01 	sts	0x0103, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 538:	10 92 21 01 	sts	0x0121, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 53c:	80 91 02 01 	lds	r24, 0x0102
 540:	84 ff       	sbrs	r24, 4
 542:	5a c0       	rjmp	.+180    	; 0x5f8 <usbPoll+0x202>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 544:	80 91 03 01 	lds	r24, 0x0103
 548:	8f 3f       	cpi	r24, 0xFF	; 255
 54a:	09 f4       	brne	.+2      	; 0x54e <usbPoll+0x158>
 54c:	55 c0       	rjmp	.+170    	; 0x5f8 <usbPoll+0x202>
 54e:	18 2f       	mov	r17, r24
 550:	89 30       	cpi	r24, 0x09	; 9
 552:	08 f0       	brcs	.+2      	; 0x556 <usbPoll+0x160>
 554:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 556:	81 1b       	sub	r24, r17
 558:	80 93 03 01 	sts	0x0103, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 55c:	80 91 12 01 	lds	r24, 0x0112
 560:	98 e8       	ldi	r25, 0x88	; 136
 562:	89 27       	eor	r24, r25
 564:	80 93 12 01 	sts	0x0112, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 568:	11 23       	and	r17, r17
 56a:	99 f1       	breq	.+102    	; 0x5d2 <usbPoll+0x1dc>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 56c:	80 91 0f 01 	lds	r24, 0x010F
 570:	87 ff       	sbrs	r24, 7
 572:	09 c0       	rjmp	.+18     	; 0x586 <usbPoll+0x190>
            len = usbFunctionRead(data, len);
 574:	83 e1       	ldi	r24, 0x13	; 19
 576:	91 e0       	ldi	r25, 0x01	; 1
 578:	61 2f       	mov	r22, r17
 57a:	0e 94 48 01 	call	0x290	; 0x290 <usbFunctionRead>
 57e:	18 2f       	mov	r17, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
 580:	89 30       	cpi	r24, 0x09	; 9
 582:	a0 f5       	brcc	.+104    	; 0x5ec <usbPoll+0x1f6>
 584:	26 c0       	rjmp	.+76     	; 0x5d2 <usbPoll+0x1dc>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 586:	20 91 1f 01 	lds	r18, 0x011F
 58a:	30 91 20 01 	lds	r19, 0x0120
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 58e:	86 ff       	sbrs	r24, 6
 590:	0d c0       	rjmp	.+26     	; 0x5ac <usbPoll+0x1b6>
 592:	a3 e1       	ldi	r26, 0x13	; 19
 594:	b1 e0       	ldi	r27, 0x01	; 1
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 59a:	f9 01       	movw	r30, r18
 59c:	e8 0f       	add	r30, r24
 59e:	f9 1f       	adc	r31, r25
 5a0:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 5a2:	ed 93       	st	X+, r30
 5a4:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 5a6:	18 17       	cp	r17, r24
 5a8:	c1 f7       	brne	.-16     	; 0x59a <usbPoll+0x1a4>
 5aa:	08 c0       	rjmp	.+16     	; 0x5bc <usbPoll+0x1c6>
 5ac:	91 2f       	mov	r25, r17
 5ae:	d9 01       	movw	r26, r18
 5b0:	e3 e1       	ldi	r30, 0x13	; 19
 5b2:	f1 e0       	ldi	r31, 0x01	; 1
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 5b4:	8d 91       	ld	r24, X+
 5b6:	81 93       	st	Z+, r24
                }while(--i);
 5b8:	91 50       	subi	r25, 0x01	; 1
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <usbPoll+0x1be>
 5bc:	11 50       	subi	r17, 0x01	; 1
 5be:	81 2f       	mov	r24, r17
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	1f 5f       	subi	r17, 0xFF	; 255
 5c4:	01 96       	adiw	r24, 0x01	; 1
 5c6:	82 0f       	add	r24, r18
 5c8:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 5ca:	90 93 20 01 	sts	0x0120, r25
 5ce:	80 93 1f 01 	sts	0x011F, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 5d2:	83 e1       	ldi	r24, 0x13	; 19
 5d4:	91 e0       	ldi	r25, 0x01	; 1
 5d6:	61 2f       	mov	r22, r17
 5d8:	0e 94 1f 03 	call	0x63e	; 0x63e <usbCrc16Append>
        len += 4;           /* length including sync byte */
 5dc:	61 2f       	mov	r22, r17
 5de:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 5e0:	6c 30       	cpi	r22, 0x0C	; 12
 5e2:	41 f0       	breq	.+16     	; 0x5f4 <usbPoll+0x1fe>
            usbMsgLen = USB_NO_MSG;
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	80 93 03 01 	sts	0x0103, r24
 5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <usbPoll+0x1fe>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
 5ec:	8f ef       	ldi	r24, 0xFF	; 255
 5ee:	80 93 03 01 	sts	0x0103, r24
 5f2:	6e e1       	ldi	r22, 0x1E	; 30
    }
    usbTxLen = len;
 5f4:	60 93 02 01 	sts	0x0102, r22
 5f8:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 5fa:	89 b1       	in	r24, 0x09	; 9
        if(usbLineStatus != 0)  /* SE0 has ended */
 5fc:	84 71       	andi	r24, 0x14	; 20
 5fe:	31 f4       	brne	.+12     	; 0x60c <usbPoll+0x216>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 600:	91 50       	subi	r25, 0x01	; 1
 602:	d9 f7       	brne	.-10     	; 0x5fa <usbPoll+0x204>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 604:	10 92 22 01 	sts	0x0122, r1
    usbDeviceAddr = 0;
 608:	10 92 10 01 	sts	0x0110, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	08 95       	ret

00000614 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 614:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 616:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 618:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 61a:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 61c:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 61e:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 620:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 622:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 624:	09 c0       	rjmp	.+18     	; 0x638 <usbCrcLoopEntry>

00000626 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 626:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 628:	82 27       	eor	r24, r18

0000062a <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 62a:	97 95       	ror	r25
    ror     resCrcL
 62c:	87 95       	ror	r24
    brcs    usbCrcNoXor
 62e:	10 f0       	brcs	.+4      	; 0x634 <usbCrcNoXor>
    eor     resCrcL, polyL
 630:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 632:	95 27       	eor	r25, r21

00000634 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 634:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 636:	c8 f3       	brcs	.-14     	; 0x62a <usbCrcBitLoop>

00000638 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 638:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 63a:	a8 f3       	brcs	.-22     	; 0x626 <usbCrcByteLoop>

0000063c <usbCrcReady>:
usbCrcReady:
    ret
 63c:	08 95       	ret

0000063e <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 63e:	ea df       	rcall	.-44     	; 0x614 <usbCrc16>
    st      ptr+, resCrcL
 640:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 642:	9d 93       	st	X+, r25
    ret
 644:	08 95       	ret

00000646 <__vector_1>:
#if USB_INT_USBD_EXTERNAL == 1
	sbis	0x1e, 0
	rjmp	i__vector_1
#endif
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 646:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 648:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 64a:	cf 93       	push	r28

0000064c <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 64c:	c3 95       	inc	r28
    //in		YL, 	USBIN
    sbis    USBIN, 	USBMINUS
 64e:	4c 9b       	sbis	0x09, 4	; 9
    brne    waitForJ        ; just make sure we have ANY timeout
 650:	e9 f7       	brne	.-6      	; 0x64c <waitForJ>

00000652 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    //in		YL, 	USBIN
    sbis    USBIN, 	USBMINUS
 652:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 654:	09 c0       	rjmp	.+18     	; 0x668 <foundK>
    //in		YL, 	USBIN
    sbis    USBIN, 	USBMINUS
 656:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 658:	07 c0       	rjmp	.+14     	; 0x668 <foundK>
    //in		YL, 	USBIN
    sbis    USBIN, USBMINUS
 65a:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 65c:	05 c0       	rjmp	.+10     	; 0x668 <foundK>
    //in		YL, 	USBIN
    sbis    USBIN, 	USBMINUS
 65e:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 660:	03 c0       	rjmp	.+6      	; 0x668 <foundK>
    //in		YL, 	USBIN
    sbis    USBIN, 	USBMINUS
 662:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 664:	01 c0       	rjmp	.+2      	; 0x668 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 666:	b7 c0       	rjmp	.+366    	; 0x7d6 <sofError>

00000668 <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  	;1 [1]
 668:	df 93       	push	r29
	push	x1						;1 [2]
 66a:	0f 93       	push	r16
    lds     YL, usbInputBufOffset	;2 [4]
 66c:	c0 91 1e 01 	lds	r28, 0x011E
    clr     YH                  	;1 [5]
 670:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf))	;1 [6]
 672:	cc 5d       	subi	r28, 0xDC	; 220
    sbci    YH, hi8(-(usbRxBuf))	;1 [7]
 674:	de 4f       	sbci	r29, 0xFE	; 254

	;in      x1,    USBIN			;1 [8]
	sbis	USBIN,    USBMINUS			;1 [9]
 676:	4c 9b       	sbis	0x09, 4	; 9
    ;sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
    rjmp    haveTwoBitsK    		;1 [10]
 678:	03 c0       	rjmp	.+6      	; 0x680 <haveTwoBitsK>
    pop     x1
 67a:	0f 91       	pop	r16
    pop     YH             			;1 [11] undo the push from before
 67c:	df 91       	pop	r29
    rjmp    waitForK        		;1 [12] this was not the end of sync, retry
 67e:	e9 cf       	rjmp	.-46     	; 0x652 <waitForK>

00000680 <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
	pop		x1						;1 [10]
 680:	0f 91       	pop	r16
    push    shift          			;1 [11];2 [16]
 682:	2f 93       	push	r18
    push    x1              		;1 [12];2 [12]
 684:	0f 93       	push	r16
    push    x2             			;1 [13];2 [14]
 686:	1f 93       	push	r17
    nop		    				;2 [15]
 688:	00 00       	nop
    nop
 68a:	00 00       	nop

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 68c:	09 b1       	in	r16, 0x09	; 9
    ldi     shift, 0xff     ;1 [18]
 68e:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 690:	04 fb       	bst	r16, 4
    bld     shift, 0        ;1 [20]
 692:	20 f9       	bld	r18, 0
    push    x3              ;1 [21];2 [22]
 694:	4f 93       	push	r20
    push    cnt             ;1 [22];2 [24]
 696:	3f 93       	push	r19
    nop		    ;2 [24]
 698:	00 00       	nop
    nop
 69a:	00 00       	nop
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 69c:	19 b1       	in	r17, 0x09	; 9
    ser     x3              ;1 [26] [inserted init instruction]
 69e:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 6a0:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 6a2:	04 fb       	bst	r16, 4
    bld     shift, 1        ;1 [29]
 6a4:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 6a6:	3b e0       	ldi	r19, 0x0B	; 11
    nop			    ;1 [31]
 6a8:	00 00       	nop
    rjmp    rxbit2          ;1 [32];2[32]
 6aa:	39 c0       	rjmp	.+114    	; 0x71e <rxbit2>

000006ac <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 6ac:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 6ae:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 6b0:	19 b1       	in	r17, 0x09	; 9
    ori     shift, 0x01 ;1 [18]
 6b2:	21 60       	ori	r18, 0x01	; 1
    nop			;1 [19]
 6b4:	00 00       	nop
    rjmp    didUnstuff0 ;1 [20];2 [20]
 6b6:	2f c0       	rjmp	.+94     	; 0x716 <didUnstuff0>

000006b8 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 6b8:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 6ba:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 6bc:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 6be:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 6c0:	09 b1       	in	r16, 0x09	; 9
    nop			;1 [26]
 6c2:	00 00       	nop
    rjmp    didUnstuff1 ;1 [27];2 [27]
 6c4:	2f c0       	rjmp	.+94     	; 0x724 <didUnstuff1>

000006c6 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 6c6:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 6c8:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 6ca:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 6cc:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 6ce:	19 b1       	in	r17, 0x09	; 9
    nop			;1 [34]
 6d0:	00 00       	nop
    rjmp    didUnstuff2 ;1 [35];2 [35]
 6d2:	30 c0       	rjmp	.+96     	; 0x734 <didUnstuff2>

000006d4 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 6d4:	19 b1       	in	r17, 0x09	; 9
    andi    x3, ~0x08   ;1 [35]
 6d6:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 6d8:	28 60       	ori	r18, 0x08	; 8
    nop			;1 [37]
 6da:	00 00       	nop
    rjmp    didUnstuff3 ;1 [38];2 [38]
 6dc:	2e c0       	rjmp	.+92     	; 0x73a <didUnstuff3>

000006de <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 6de:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 6e0:	09 b1       	in	r16, 0x09	; 9
    ori     shift, 0x10 ;1 [42]
 6e2:	20 61       	ori	r18, 0x10	; 16
    nop			;1 [43]
 6e4:	00 00       	nop
    rjmp    didUnstuff4 ;1 [44];2 [44]
 6e6:	2f c0       	rjmp	.+94     	; 0x746 <didUnstuff4>

000006e8 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 6e8:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 6ea:	19 b1       	in	r17, 0x09	; 9
    ori     shift, 0x20 ;1 [50]
 6ec:	20 62       	ori	r18, 0x20	; 32
    nop			;1 [51]
 6ee:	00 00       	nop
    rjmp    didUnstuff5 ;1 [52];2 [52]
 6f0:	32 c0       	rjmp	.+100    	; 0x756 <didUnstuff5>

000006f2 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 6f2:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 6f4:	09 b1       	in	r16, 0x09	; 9
    ori     shift, 0x40 ;1 [58]
 6f6:	20 64       	ori	r18, 0x40	; 64
    nop			;1 [59]
 6f8:	00 00       	nop
    rjmp    didUnstuff6 ;1 [60];2 [60]
 6fa:	35 c0       	rjmp	.+106    	; 0x766 <didUnstuff6>

000006fc <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 6fc:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 6fe:	09 b1       	in	r16, 0x09	; 9
    nop			;1 [2]
 700:	00 00       	nop
    st      y+, x3      ;1 [3];2 [3] store data
 702:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 704:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 706:	00 00       	nop
    eor     x2, x1      ;1 [6]
 708:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 70a:	14 fb       	bst	r17, 4
    bld     shift, 0    ;1 [8]
 70c:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 70e:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;1 [10]
 710:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;1 [11] SE0 check for bit 1
 712:	e9 f1       	breq	.+122    	; 0x78e <se0>
    andi    shift, 0xf9 ;1 [12]
 714:	29 7f       	andi	r18, 0xF9	; 249

00000716 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 716:	51 f2       	breq	.-108    	; 0x6ac <unstuff0>
    eor     x1, x2      ;1 [14]
 718:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 71a:	04 fb       	bst	r16, 4
    bld     shift, 1    ;1 [16]
 71c:	21 f9       	bld	r18, 1

0000071e <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 71e:	09 b1       	in	r16, 0x09	; 9
    andi    shift, 0xf3 ;1 [18]
 720:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 722:	51 f2       	breq	.-108    	; 0x6b8 <unstuff1>

00000724 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 724:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 726:	78 f1       	brcs	.+94     	; 0x786 <overflow>
    eor     x2, x1      ;1 [22]
 728:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 72a:	14 fb       	bst	r17, 4
    bld     shift, 2    ;1 [24]
 72c:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 72e:	19 b1       	in	r17, 0x09	; 9
    andi    shift, 0xe7 ;1 [26]
 730:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 732:	49 f2       	breq	.-110    	; 0x6c6 <unstuff2>

00000734 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 734:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 736:	04 fb       	bst	r16, 4
    bld     shift, 3    ;1 [30]
 738:	23 f9       	bld	r18, 3

0000073a <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 73a:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 73c:	59 f2       	breq	.-106    	; 0x6d4 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 73e:	09 b1       	in	r16, 0x09	; 9
    eor     x2, x1      ;1 [34]
 740:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 742:	14 fb       	bst	r17, 4
    bld     shift, 4    ;1 [36]
 744:	24 f9       	bld	r18, 4

00000746 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 746:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 748:	51 f2       	breq	.-108    	; 0x6de <unstuff4>
    nop                ;2 [40]
 74a:	00 00       	nop
    nop
 74c:	00 00       	nop
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 74e:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2      ;1 [42]
 750:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 752:	04 fb       	bst	r16, 4
    bld     shift, 5    ;1 [44]
 754:	25 f9       	bld	r18, 5

00000756 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 756:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 758:	39 f2       	breq	.-114    	; 0x6e8 <unstuff5>
    nop                ;2 [48]
 75a:	00 00       	nop
    nop
 75c:	00 00       	nop
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 75e:	09 b1       	in	r16, 0x09	; 9
    eor     x2, x1      ;1 [50]
 760:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 762:	14 fb       	bst	r17, 4
    bld     shift, 6    ;1 [52]
 764:	26 f9       	bld	r18, 6

00000766 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 766:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 768:	20 f2       	brcs	.-120    	; 0x6f2 <unstuff6>
    nop                ;2 [56]
 76a:	00 00       	nop
    nop
 76c:	00 00       	nop
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 76e:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2      ;1 [58]
 770:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 772:	04 fb       	bst	r16, 4
    bld     shift, 7    ;1 [60]
 774:	27 f9       	bld	r18, 7

00000776 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 776:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 778:	08 f6       	brcc	.-126    	; 0x6fc <rxLoop>

0000077a <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 77a:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 77c:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 77e:	19 b1       	in	r17, 0x09	; 9
    nop                ;2 [67];1 [66]
 780:	00 00       	nop
    nop
 782:	00 00       	nop
    rjmp    didUnstuff7 ;1 [68];2 [68]
 784:	f8 cf       	rjmp	.-16     	; 0x776 <didUnstuff7>

00000786 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 786:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 788:	1c bb       	out	0x1c, r17	; 28

0000078a <ignorePacket>:
ignorePacket:
    clr     token
 78a:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 78c:	19 c0       	rjmp	.+50     	; 0x7c0 <handleSetupOrOut>

0000078e <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 78e:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 790:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 792:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 794:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 796:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 798:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
 79a:	08 81       	ld	r16, Y
    nop				;[12]
 79c:	00 00       	nop
    cpi     token, USBPID_DATA0 ;[13]
 79e:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 7a0:	f1 f0       	breq	.+60     	; 0x7de <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 7a2:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 7a4:	e1 f0       	breq	.+56     	; 0x7de <handleData>
    lds     shift, usbDeviceAddr;[17]
 7a6:	20 91 10 01 	lds	r18, 0x0110
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 7aa:	19 81       	ldd	r17, Y+1	; 0x01
    nop				;[20]
 7ac:	00 00       	nop
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 7ae:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 7b0:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 7b2:	eb cf       	rjmp	.-42     	; 0x78a <ignorePacket>
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
    nop				;[25]
    rol     x3                  ;[26] shift in LSB of endpoint
#endif
    cpi     token, USBPID_IN    ;[27]
 7b4:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 7b6:	41 f1       	breq	.+80     	; 0x808 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 7b8:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 7ba:	11 f0       	breq	.+4      	; 0x7c0 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 7bc:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 7be:	29 f7       	brne	.-54     	; 0x78a <ignorePacket>

000007c0 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 7c0:	00 93 11 01 	sts	0x0111, r16

000007c4 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 7c4:	3f 91       	pop	r19
 7c6:	4f 91       	pop	r20
 7c8:	1f 91       	pop	r17
 7ca:	0f 91       	pop	r16
 7cc:	2f 91       	pop	r18
 7ce:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 7d0:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 7d2:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 7d4:	3b cf       	rjmp	.-394    	; 0x64c <waitForJ>

000007d6 <sofError>:
sofError:
    POP_RETI                    ;macro call
 7d6:	cf 91       	pop	r28
 7d8:	cf bf       	out	0x3f, r28	; 63
 7da:	cf 91       	pop	r28
    reti
 7dc:	18 95       	reti

000007de <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 7de:	20 91 11 01 	lds	r18, 0x0111
    tst     shift               ;[20]
 7e2:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 7e4:	79 f3       	breq	.-34     	; 0x7c4 <doReturn>
    lds     x2, usbRxLen        ;[22]
 7e6:	10 91 21 01 	lds	r17, 0x0121
    tst     x2                  ;[24]
 7ea:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 7ec:	11 f5       	brne	.+68     	; 0x832 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 7ee:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 7f0:	1a f1       	brmi	.+70     	; 0x838 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 7f2:	30 93 21 01 	sts	0x0121, r19
    sts     usbRxToken, shift   ;[30]
 7f6:	20 93 1d 01 	sts	0x011D, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 7fa:	10 91 1e 01 	lds	r17, 0x011E
    ldi     cnt, USB_BUFSIZE    ;[34]
 7fe:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 800:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 802:	30 93 1e 01 	sts	0x011E, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 806:	18 c0       	rjmp	.+48     	; 0x838 <sendAckAndReti>

00000808 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 808:	00 91 21 01 	lds	r16, 0x0121
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 80c:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 80e:	8c f4       	brge	.+34     	; 0x832 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 810:	0a e5       	ldi	r16, 0x5A	; 90
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 812:	30 91 02 01 	lds	r19, 0x0102
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 816:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 818:	12 c0       	rjmp	.+36     	; 0x83e <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 81a:	00 93 02 01 	sts	0x0102, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 81e:	c2 e1       	ldi	r28, 0x12	; 18
    ldi     YH, hi8(usbTxBuf)   ;[44]
 820:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 822:	11 c0       	rjmp	.+34     	; 0x846 <usbSendAndReti>

00000824 <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 824:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 826:	c8 f4       	brcc	.+50     	; 0x85a <doExorN1>
    subi    x4, 1               ;[-3]
 828:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 82a:	c9 f4       	brne	.+50     	; 0x85e <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 82c:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 82e:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 830:	f9 cf       	rjmp	.-14     	; 0x824 <stuffN1Delay>

00000832 <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 832:	4a e5       	ldi	r20, 0x5A	; 90
    nop				;1 [-17]
 834:	00 00       	nop
    rjmp    usbSendX3           ;1;[-16];2 [-16]
 836:	04 c0       	rjmp	.+8      	; 0x840 <usbSendX3>

00000838 <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 838:	42 ed       	ldi	r20, 0xD2	; 210
    nop				;1 [-17]
 83a:	00 00       	nop
    rjmp    usbSendX3           ;1 [-16];2 [-16]
 83c:	01 c0       	rjmp	.+2      	; 0x840 <usbSendX3>

0000083e <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 83e:	43 2f       	mov	r20, r19

00000840 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 840:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 842:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 844:	32 e0       	ldi	r19, 0x02	; 2

00000846 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 846:	1a b1       	in	r17, 0x0a	; 10
    ori     x2, USBMASK         ;[-11]
 848:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 84a:	5c 9a       	sbi	0x0b, 4	; 11
    nop				;[-9]
 84c:	00 00       	nop
    out     USBDDR, x2          ;[-8] <--- acquire bus
 84e:	1a b9       	out	0x0a, r17	; 10
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 850:	0b b1       	in	r16, 0x0b	; 11
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 852:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 854:	14 e1       	ldi	r17, 0x14	; 20
    push    x4                  ;[-4]
 856:	5f 93       	push	r21
	...

0000085a <doExorN1>:
    nop				;[-3]
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 85a:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 85c:	56 e0       	ldi	r21, 0x06	; 6

0000085e <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 85e:	0b b9       	out	0x0b, r16	; 11
    ror     shift               ;[01]
 860:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 862:	28 f4       	brcc	.+10     	; 0x86e <doExorN2>
    subi    x4, 1               ;[03]
 864:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 866:	29 f4       	brne	.+10     	; 0x872 <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 868:	22 0f       	add	r18, r18
    nop				;[06]
 86a:	00 00       	nop
    rjmp    stuffN2Delay        ;[07];[06] after ror, C bit is reliably clear
 86c:	f8 cf       	rjmp	.-16     	; 0x85e <commonN1>

0000086e <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 86e:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 870:	56 e0       	ldi	r21, 0x06	; 6

00000872 <commonN2>:
commonN2:
    nop                         ;[06] [14]
 872:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 874:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 876:	0b b9       	out	0x0b, r16	; 11
    brcs    txBitloop           ;[09]      [25] [41]
 878:	a8 f2       	brcs	.-86     	; 0x824 <stuffN1Delay>

0000087a <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 87a:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 87c:	30 f4       	brcc	.+12     	; 0x88a <doExor6>
    subi    x4, 1               ;[44]
 87e:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 880:	31 f4       	brne	.+12     	; 0x88e <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 882:	22 0f       	add	r18, r18
    nop                        ;[48] stuffing consists of just waiting 8 cycles
 884:	00 00       	nop
    nop
 886:	00 00       	nop
    rjmp    stuff6Delay         ;[49] after ror, C bit is reliably clear
 888:	f8 cf       	rjmp	.-16     	; 0x87a <stuff6Delay>

0000088a <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 88a:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 88c:	56 e0       	ldi	r21, 0x06	; 6

0000088e <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 88e:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 890:	0b b9       	out	0x0b, r16	; 11
    brcc    doExor7             ;[49]
 892:	20 f4       	brcc	.+8      	; 0x89c <doExor7>
    subi    x4, 1               ;[50]
 894:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 896:	21 f4       	brne	.+8      	; 0x8a0 <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 898:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 89a:	f9 cf       	rjmp	.-14     	; 0x88e <common6>

0000089c <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 89c:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 89e:	56 e0       	ldi	r21, 0x06	; 6

000008a0 <common7>:
common7:
    ld      shift, y+           ;[53]
 8a0:	29 91       	ld	r18, Y+
    nop							;[54]
 8a2:	00 00       	nop
    tst     cnt                 ;[55];[55]
 8a4:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56];[56] <--- set bit
 8a6:	0b b9       	out	0x0b, r16	; 11
    ;brne     txByteLoop			;[57]
    breq    makeSE0				;[57]
 8a8:	09 f0       	breq	.+2      	; 0x8ac <makeSE0>
    rjmp    txByteLoop          ;[58]
 8aa:	bc cf       	rjmp	.-136    	; 0x824 <stuffN1Delay>

000008ac <makeSE0>:

makeSE0:
;make SE0:
    cbr     x1, USBMASK         ;[59] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 8ac:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[60]
 8ae:	10 91 22 01 	lds	r17, 0x0122
    lsl     x2                  ;[62] we compare with left shifted address
 8b2:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[63] Only assign address on data packets, not ACK/NAK in x3
 8b4:	c6 51       	subi	r28, 0x16	; 22
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 8b6:	0b b9       	out	0x0b, r16	; 11
    sbci    YH, 0               ;[01]
 8b8:	d0 40       	sbci	r29, 0x00	; 0
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[02]
 8ba:	11 f0       	breq	.+4      	; 0x8c0 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 8bc:	10 93 10 01 	sts	0x0110, r17

000008c0 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[04] int0 occurred during TX -- clear pending flag
 8c0:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[05]
 8c2:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE         ;[06]
 8c4:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR          ;[07]
 8c6:	1a b1       	in	r17, 0x0a	; 10
    cbr     x2, USBMASK         ;[08] set both pins to input
 8c8:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1              ;[09]
 8ca:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[10] configure no pullup on both pins
 8cc:	4b 7e       	andi	r20, 0xEB	; 235
    pop     x4                  ;[11]
 8ce:	5f 91       	pop	r21
	...
    nop                        ;[12]
    nop
    nop                        ;[14]
    nop
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 8d8:	0b b9       	out	0x0b, r16	; 11
    out     USBDDR, x2          ;[17] <-- release bus now
 8da:	1a b9       	out	0x0a, r17	; 10
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 8dc:	4b b9       	out	0x0b, r20	; 11
    rjmp    doReturn
 8de:	72 cf       	rjmp	.-284    	; 0x7c4 <doReturn>

000008e0 <DrvEEPROM_ProgFlashHWord>:
 *	@param wAddr
 *		word based
 *	@param wData
 */
void DrvEEPROM_ProgFlashHWord(u16 hwAddr, u16 hwLen, u8 *pData)
{
 8e0:	dc 01       	movw	r26, r24
 8e2:	fa 01       	movw	r30, r20
	u8 sregval, i;
	// read status register
	sregval = SREG;
 8e4:	4f b7       	in	r20, 0x3f	; 63
	// clear global interrupt enable
	CLI();
 8e6:	f8 94       	cli
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	16 c0       	rjmp	.+44     	; 0x918 <__stack+0x19>
	for(i = 0; i < hwLen; i++)
	{
		// wait for completion of previous write
		while(EECR & (1 << EEPE));
 8ec:	f9 99       	sbic	0x1f, 1	; 31
 8ee:	fe cf       	rjmp	.-4      	; 0x8ec <DrvEEPROM_ProgFlashHWord+0xc>
		hwAddr = hwAddr & 0xfffe;
 8f0:	cd 01       	movw	r24, r26
 8f2:	8e 7f       	andi	r24, 0xFE	; 254
		// address
		EEARH = (hwAddr >> 8) & 0xff;
 8f4:	92 bd       	out	0x22, r25	; 34
		EEARL = (hwAddr) & 0xff;
 8f6:	81 bd       	out	0x21, r24	; 33
		hwAddr += 1;
 8f8:	01 96       	adiw	r24, 0x01	; 1
		// data
		EEDR = *pData++;
 8fa:	20 81       	ld	r18, Z
 8fc:	20 bd       	out	0x20, r18	; 32
		//
		EEARL = (hwAddr) & 0xff;
 8fe:	81 bd       	out	0x21, r24	; 33
		EEDR = *pData++;
 900:	21 81       	ldd	r18, Z+1	; 0x01
 902:	20 bd       	out	0x20, r18	; 32
 *	@param wAddr
 *		word based
 *	@param wData
 */
void DrvEEPROM_ProgFlashHWord(u16 hwAddr, u16 hwLen, u8 *pData)
{
 904:	32 96       	adiw	r30, 0x02	; 2
		// data
		EEDR = *pData++;
		//
		EEARL = (hwAddr) & 0xff;
		EEDR = *pData++;
		hwAddr += 1;
 906:	dc 01       	movw	r26, r24
 908:	11 96       	adiw	r26, 0x01	; 1
		// Program Mode
		EECR = 0xa0 | (EECR & (1 << EERIE));
 90a:	8f b3       	in	r24, 0x1f	; 31
 90c:	88 70       	andi	r24, 0x08	; 8
 90e:	80 6a       	ori	r24, 0xA0	; 160
 910:	8f bb       	out	0x1f, r24	; 31
		// write logical one to EEMWE
		// start eeprom write by setting EEWE

		asm volatile
 912:	fa 9a       	sbi	0x1f, 2	; 31
 914:	f9 9a       	sbi	0x1f, 1	; 31
	u8 sregval, i;
	// read status register
	sregval = SREG;
	// clear global interrupt enable
	CLI();
	for(i = 0; i < hwLen; i++)
 916:	3f 5f       	subi	r19, 0xFF	; 255
 918:	83 2f       	mov	r24, r19
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	86 17       	cp	r24, r22
 91e:	97 07       	cpc	r25, r23
 920:	28 f3       	brcs	.-54     	; 0x8ec <DrvEEPROM_ProgFlashHWord+0xc>
			::"M"(EEMPE),"M"(EEPE)
		);

	}
	// wait for completion of This write
	while(EECR & (1 << EEPE));
 922:	f9 99       	sbic	0x1f, 1	; 31
 924:	fe cf       	rjmp	.-4      	; 0x922 <__stack+0x23>

	EECR = (EECR & (1 << EERIE));
 926:	8f b3       	in	r24, 0x1f	; 31
 928:	88 70       	andi	r24, 0x08	; 8
 92a:	8f bb       	out	0x1f, r24	; 31
	
	SREG = sregval;
 92c:	4f bf       	out	0x3f, r20	; 63
}
 92e:	08 95       	ret

00000930 <DrvEEPROM_EraseFlashPage>:
 */
void DrvEEPROM_EraseFlashPage(u16 pAddr)
{
	u8 sregval;
	// read status register
	sregval = SREG;
 930:	2f b7       	in	r18, 0x3f	; 63
	// clear global interrupt enable
	CLI();
 932:	f8 94       	cli
	
	// wait for completion of previous write
	while(EECR & (1 << EEPE));
 934:	f9 99       	sbic	0x1f, 1	; 31
 936:	fe cf       	rjmp	.-4      	; 0x934 <DrvEEPROM_EraseFlashPage+0x4>
	// address
	EEARH = (pAddr >> 8) & 0xff;
 938:	92 bd       	out	0x22, r25	; 34
	EEARL = (pAddr) & 0xff;
 93a:	81 bd       	out	0x21, r24	; 33
	// data
	//EEDRL = *wData & 0xff;
	//EEDRH = (*wData >> 8) & 0xff;
	// Program Mode
	EECR = 0x90;
 93c:	80 e9       	ldi	r24, 0x90	; 144
 93e:	8f bb       	out	0x1f, r24	; 31
	// write logical one to EEMWE
	// start eeprom write by setting EEWE

	asm volatile
 940:	fa 9a       	sbi	0x1f, 2	; 31
 942:	f9 9a       	sbi	0x1f, 1	; 31
		"sbi 0x1f, %0\n\t"			//EECR |= (1 << EEMWE);
		"sbi 0x1f, %1\n\t"			//EECR |= (1 << EEWE);
		::"M"(EEMPE),"M"(EEPE)
	);
	/// wait for completion of This write
	while(EECR & (1 << EEPE));
 944:	f9 99       	sbic	0x1f, 1	; 31
 946:	fe cf       	rjmp	.-4      	; 0x944 <DrvEEPROM_EraseFlashPage+0x14>

	EECR = 0x0;
 948:	1f ba       	out	0x1f, r1	; 31
		
	SREG = sregval;
 94a:	2f bf       	out	0x3f, r18	; 63
}
 94c:	08 95       	ret

0000094e <DrvEEPROM_ReadFlashByte>:
 */
u8 DrvEEPROM_ReadFlashByte(u16 rAddr)
{
	u8 sregval;
	// read status register
	sregval = SREG;
 94e:	2f b7       	in	r18, 0x3f	; 63
	// wait for completion of previous write
	while(EECR & (1 << EEPE));
 950:	f9 99       	sbic	0x1f, 1	; 31
 952:	fe cf       	rjmp	.-4      	; 0x950 <DrvEEPROM_ReadFlashByte+0x2>
	// address
	EEARH = (rAddr >> 8) & 0xff;;
 954:	92 bd       	out	0x22, r25	; 34
	EEARL = (rAddr) & 0xff;
 956:	81 bd       	out	0x21, r24	; 33
	// start eeprom read by writting EERE
	EECR = 0x90;
 958:	80 e9       	ldi	r24, 0x90	; 144
 95a:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1 << EERE);
 95c:	f8 9a       	sbi	0x1f, 0	; 31
	NOP();
 95e:	00 00       	nop
	NOP();
 960:	00 00       	nop
	// return data from data register
	return EEDR;
 962:	80 b5       	in	r24, 0x20	; 32
}
 964:	08 95       	ret

00000966 <DrvEEPROM_ReadFWord>:

void DrvEEPROM_ReadFWord(u16 u16Addr, u16 u16Len, u16 *pu16Data)
{
 966:	cf 92       	push	r12
 968:	df 92       	push	r13
 96a:	ef 92       	push	r14
 96c:	ff 92       	push	r15
 96e:	0f 93       	push	r16
 970:	1f 93       	push	r17
 972:	cf 93       	push	r28
 974:	df 93       	push	r29
 976:	7c 01       	movw	r14, r24
 978:	6b 01       	movw	r12, r22
 97a:	c0 e0       	ldi	r28, 0x00	; 0
 97c:	d0 e0       	ldi	r29, 0x00	; 0
 97e:	0d c0       	rjmp	.+26     	; 0x99a <DrvEEPROM_ReadFWord+0x34>
	u16 i;
	for(i = 0; i < u16Len; i++) 
	{
		Compiler_LPMReadWord(u16Addr, pu16Data++);
 980:	8a 01       	movw	r16, r20
 982:	0e 5f       	subi	r16, 0xFE	; 254
 984:	1f 4f       	sbci	r17, 0xFF	; 255
 986:	c7 01       	movw	r24, r14
 988:	ba 01       	movw	r22, r20
 98a:	0e 94 68 05 	call	0xad0	; 0xad0 <Compiler_LPMReadWord>
		u16Addr += 2;
 98e:	82 e0       	ldi	r24, 0x02	; 2
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	e8 0e       	add	r14, r24
 994:	f9 1e       	adc	r15, r25
}

void DrvEEPROM_ReadFWord(u16 u16Addr, u16 u16Len, u16 *pu16Data)
{
	u16 i;
	for(i = 0; i < u16Len; i++) 
 996:	21 96       	adiw	r28, 0x01	; 1
 998:	a8 01       	movw	r20, r16
 99a:	cc 15       	cp	r28, r12
 99c:	dd 05       	cpc	r29, r13
 99e:	80 f3       	brcs	.-32     	; 0x980 <DrvEEPROM_ReadFWord+0x1a>
	{
		Compiler_LPMReadWord(u16Addr, pu16Data++);
		u16Addr += 2;
	}
}
 9a0:	df 91       	pop	r29
 9a2:	cf 91       	pop	r28
 9a4:	1f 91       	pop	r17
 9a6:	0f 91       	pop	r16
 9a8:	ff 90       	pop	r15
 9aa:	ef 90       	pop	r14
 9ac:	df 90       	pop	r13
 9ae:	cf 90       	pop	r12
 9b0:	08 95       	ret

000009b2 <i__vector_1>:
void i__vector_1 (void) __attribute__ ((used, externally_visible));

void i__vector_1 (void)

{
	asm("jmp	0xc04");
 9b2:	0c 94 02 06 	jmp	0xc04	; 0xc04 <ex_vector_2>
}
 9b6:	08 95       	ret

000009b8 <__vector_2>:
void __vector_2 (void) __attribute__ ((used, externally_visible));

void __vector_2 (void)

{
	asm("jmp	0xc08");
 9b8:	0c 94 04 06 	jmp	0xc08	; 0xc08 <ex_vector_4>
}
 9bc:	08 95       	ret

000009be <__vector_3>:
void __vector_3 (void) __attribute__ ((used, externally_visible));

void __vector_3 (void)

{
	asm("jmp	0xc0c");
 9be:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <ex_vector_6>
}
 9c2:	08 95       	ret

000009c4 <__vector_4>:
void __vector_4 (void) __attribute__ ((used, externally_visible));

void __vector_4 (void)

{
	asm("jmp	0xc10");
 9c4:	0c 94 08 06 	jmp	0xc10	; 0xc10 <ex_vector_8>
}
 9c8:	08 95       	ret

000009ca <__vector_5>:
void __vector_5 (void) __attribute__ ((used, externally_visible));

void __vector_5 (void)

{
	asm("jmp	0xc14");
 9ca:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <ex_vector_10>
}
 9ce:	08 95       	ret

000009d0 <__vector_6>:
void __vector_6 (void) __attribute__ ((used, externally_visible));

void __vector_6 (void)

{
	asm("jmp	0xc18");
 9d0:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <ex_vector_12>
}
 9d4:	08 95       	ret

000009d6 <__vector_7>:
void __vector_7 (void) __attribute__ ((used, externally_visible));

void __vector_7 (void)

{
	asm("jmp	0xc1c");
 9d6:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <ex_vector_14>
}
 9da:	08 95       	ret

000009dc <__vector_8>:
void __vector_8 (void) __attribute__ ((used, externally_visible));

void __vector_8 (void)

{
	asm("jmp	0xc20");
 9dc:	0c 94 10 06 	jmp	0xc20	; 0xc20 <ex_vector_16>
}
 9e0:	08 95       	ret

000009e2 <__vector_9>:
void __vector_9 (void) __attribute__ ((used, externally_visible));

void __vector_9 (void)

{
	asm("jmp	0xc24");
 9e2:	0c 94 12 06 	jmp	0xc24	; 0xc24 <ex_vector_18>
}
 9e6:	08 95       	ret

000009e8 <__vector_10>:
void __vector_10 (void) __attribute__ ((used, externally_visible));

void __vector_10 (void)

{
	asm("jmp	0xc28");
 9e8:	0c 94 14 06 	jmp	0xc28	; 0xc28 <ex_vector_20>
}
 9ec:	08 95       	ret

000009ee <__vector_11>:
void __vector_11 (void) __attribute__ ((used, externally_visible));

void __vector_11 (void)

{
	asm("jmp	0xc2c");
 9ee:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <ex_vector_22>
}
 9f2:	08 95       	ret

000009f4 <__vector_12>:
void __vector_12 (void) __attribute__ ((used, externally_visible));

void __vector_12 (void)

{
	asm("jmp	0xc30");
 9f4:	0c 94 18 06 	jmp	0xc30	; 0xc30 <ex_vector_24>
}
 9f8:	08 95       	ret

000009fa <__vector_13>:
void __vector_13 (void) __attribute__ ((used, externally_visible));

void __vector_13 (void)

{
	asm("jmp	0xc34");
 9fa:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <ex_vector_26>
}
 9fe:	08 95       	ret

00000a00 <__vector_14>:
void __vector_14 (void) __attribute__ ((used, externally_visible));

void __vector_14 (void)

{
	asm("jmp	0xc38");
 a00:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <ex_vector_29>
}
 a04:	08 95       	ret

00000a06 <__vector_15>:
void __vector_15 (void) __attribute__ ((used, externally_visible));

void __vector_15 (void)

{
	asm("jmp	0xc3c");
 a06:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <ex_vector_29+0x4>
}
 a0a:	08 95       	ret

00000a0c <__vector_16>:
void __vector_16 (void) __attribute__ ((used, externally_visible));

void __vector_16 (void)

{
	asm("jmp	0xc40");
 a0c:	0c 94 20 06 	jmp	0xc40	; 0xc40 <ex_vector_29+0x8>
}
 a10:	08 95       	ret

00000a12 <__vector_17>:
void __vector_17 (void) __attribute__ ((used, externally_visible));

void __vector_17 (void)

{
	asm("jmp	0xc44");
 a12:	0c 94 22 06 	jmp	0xc44	; 0xc44 <ex_vector_29+0xc>
}
 a16:	08 95       	ret

00000a18 <__vector_18>:
void __vector_18 (void) __attribute__ ((used, externally_visible));

void __vector_18 (void)

{
	asm("jmp	0xc48");
 a18:	0c 94 24 06 	jmp	0xc48	; 0xc48 <ex_vector_29+0x10>
}
 a1c:	08 95       	ret

00000a1e <__vector_19>:
void __vector_19 (void) __attribute__ ((used, externally_visible));

void __vector_19 (void)

{
	asm("jmp	0xc4c");
 a1e:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <ex_vector_29+0x14>
}
 a22:	08 95       	ret

00000a24 <__vector_20>:
void __vector_20 (void) __attribute__ ((used, externally_visible));

void __vector_20 (void)

{
	asm("jmp	0xc50");
 a24:	0c 94 28 06 	jmp	0xc50	; 0xc50 <ex_vector_29+0x18>
}
 a28:	08 95       	ret

00000a2a <__vector_21>:
void __vector_21 (void) __attribute__ ((used, externally_visible));

void __vector_21 (void)

{
	asm("jmp	0xc54");
 a2a:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <ex_vector_29+0x1c>
}
 a2e:	08 95       	ret

00000a30 <__vector_22>:
void __vector_22 (void) __attribute__ ((used, externally_visible));

void __vector_22 (void)

{
	asm("jmp	0xc58");
 a30:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <ex_vector_29+0x20>
}
 a34:	08 95       	ret

00000a36 <__vector_23>:
void __vector_23 (void) __attribute__ ((used, externally_visible));

void __vector_23 (void)

{
	asm("jmp	0xc5c");
 a36:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <ex_vector_29+0x24>
}
 a3a:	08 95       	ret

00000a3c <__vector_24>:
void __vector_24 (void) __attribute__ ((used, externally_visible));

void __vector_24 (void)

{
	asm("jmp	0xc60");
 a3c:	0c 94 30 06 	jmp	0xc60	; 0xc60 <ex_vector_29+0x28>
}
 a40:	08 95       	ret

00000a42 <__vector_25>:
void __vector_25 (void) __attribute__ ((used, externally_visible));

void __vector_25 (void)

{
	asm("jmp	0xc64");
 a42:	0c 94 32 06 	jmp	0xc64	; 0xc64 <ex_vector_29+0x2c>
}
 a46:	08 95       	ret

00000a48 <__vector_26>:
void __vector_26 (void) __attribute__ ((used, externally_visible));

void __vector_26 (void)

{
	asm("jmp	0xc68");
 a48:	0c 94 34 06 	jmp	0xc68	; 0xc68 <ex_vector_29+0x30>
}
 a4c:	08 95       	ret

00000a4e <__vector_27>:
void __vector_27 (void) __attribute__ ((used, externally_visible));

void __vector_27 (void)

{
	asm("jmp	0xc6c");
 a4e:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <ex_vector_29+0x34>
}
 a52:	08 95       	ret

00000a54 <__vector_28>:
void __vector_28 (void) __attribute__ ((used, externally_visible));

void __vector_28 (void)

{
	asm("jmp	0xc70");
 a54:	0c 94 38 06 	jmp	0xc70	; 0xc70 <ex_vector_29+0x38>
}
 a58:	08 95       	ret

00000a5a <__vector_29>:
void __vector_29 (void) __attribute__ ((used, externally_visible));

void __vector_29 (void)

{
	asm("jmp	0xc74");
 a5a:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <ex_vector_29+0x3c>
}
 a5e:	08 95       	ret

00000a60 <Compiler_SetClk>:
/**********************************************************************************
*** 						  	EXPORTED FUNCTIONS								*** 													
**********************************************************************************/
void Compiler_SetClk(u8 u8ClkEna)
{
	ASM("lds 	r20, 0xf2");
 a60:	40 91 f2 00 	lds	r20, 0x00F2
	ASM("andi	r20, 0x70");
 a64:	40 77       	andi	r20, 0x70	; 112
	ASM("ori	r20, 0x80");
 a66:	40 68       	ori	r20, 0x80	; 128
#ifdef __GNUC__
	ASM("or		r24, r20");
 a68:	84 2b       	or	r24, r20
	ASM("sts	0xf2, r24");
 a6a:	80 93 f2 00 	sts	0x00F2, r24
	ASM("sts	0xf2, r24");
 a6e:	80 93 f2 00 	sts	0x00F2, r24
		sts		0x61, r16
		sts		0x61, r16
	#endasm
#endif
	u8ClkEna = u8ClkEna;
}
 a72:	08 95       	ret

00000a74 <Compiler_SetMclk>:

void Compiler_SetMclk(u8 u8MclkSel)
{
	ASM("lds 	r20, 0xf2");
 a74:	40 91 f2 00 	lds	r20, 0x00F2
	ASM("andi	r20, 0x1f");
 a78:	4f 71       	andi	r20, 0x1F	; 31
	ASM("ori	r20, 0x80");
 a7a:	40 68       	ori	r20, 0x80	; 128
#ifdef __GNUC__
	ASM("lsl	r24");
 a7c:	88 0f       	add	r24, r24
	ASM("lsl	r24");
 a7e:	88 0f       	add	r24, r24
	ASM("lsl	r24");
 a80:	88 0f       	add	r24, r24
	ASM("lsl	r24");
 a82:	88 0f       	add	r24, r24
	ASM("lsl	r24");
 a84:	88 0f       	add	r24, r24
	ASM("or		r24, r20");
 a86:	84 2b       	or	r24, r20
	ASM("sts	0xf2, r24");
 a88:	80 93 f2 00 	sts	0x00F2, r24
	ASM("sts	0xf2, r24");
 a8c:	80 93 f2 00 	sts	0x00F2, r24
		sts		0x61, r16
		sts		0x61, r16
	#endasm
#endif
	u8MclkSel = u8MclkSel;
}
 a90:	08 95       	ret

00000a92 <Compiler_SetClkDiv>:
 * void Compiler_SetClkDiv(u8 u8ClkDiv)
 */
void Compiler_SetClkDiv(u8 u8ClkDiv)
{
	// Set CLKPCE = 1
	ASM("lds 	r20, 0x61");
 a92:	40 91 61 00 	lds	r20, 0x0061
	ASM("andi	r20, 0x60");
 a96:	40 76       	andi	r20, 0x60	; 96
	ASM("ori	r20, 0x80");
 a98:	40 68       	ori	r20, 0x80	; 128
#ifdef __GNUC__
	ASM("or		r24, r20");
 a9a:	84 2b       	or	r24, r20
	ASM("sts	0x61, r24");
 a9c:	80 93 61 00 	sts	0x0061, r24
	ASM("sts	0x61, r24");
 aa0:	80 93 61 00 	sts	0x0061, r24
		sts		0x61, r16
		sts		0x61, r16
	#endasm
#endif
    u8ClkDiv = u8ClkDiv;
}
 aa4:	08 95       	ret

00000aa6 <Compiler_SetWclk>:

void Compiler_SetWclk(u8 u8WclkSel)
{
	ASM("lds 	r20, 0xf2");
 aa6:	40 91 f2 00 	lds	r20, 0x00F2
	ASM("andi	r20, 0x6f");
 aaa:	4f 76       	andi	r20, 0x6F	; 111
	ASM("ori	r20, 0x80");
 aac:	40 68       	ori	r20, 0x80	; 128
#ifdef __GNUC__
	ASM("lsl	r24");
 aae:	88 0f       	add	r24, r24
	ASM("lsl	r24");
 ab0:	88 0f       	add	r24, r24
	ASM("lsl	r24");
 ab2:	88 0f       	add	r24, r24
	ASM("lsl	r24");
 ab4:	88 0f       	add	r24, r24
	ASM("or		r24, r20");
 ab6:	84 2b       	or	r24, r20
	ASM("sts	0xf2, r24");
 ab8:	80 93 f2 00 	sts	0x00F2, r24
	ASM("sts	0xf2, r24");
 abc:	80 93 f2 00 	sts	0x00F2, r24
		sts		0x61, r16
		sts		0x61, r16
	#endasm
#endif
	u8WclkSel = u8WclkSel;
}
 ac0:	08 95       	ret

00000ac2 <Compiler_SetWDT>:

void Compiler_SetWDT(u8 u8Wdtcsr)
{
	// Set CLKPCE = 1
#ifdef __GNUC__
	asm("mov	r25, r24");
 ac2:	98 2f       	mov	r25, r24
	asm("ori	r25, 0x08");
 ac4:	98 60       	ori	r25, 0x08	; 8
	asm("sts	0x60, r25");
 ac6:	90 93 60 00 	sts	0x0060, r25
	asm("sts	0x60, r24");
 aca:	80 93 60 00 	sts	0x0060, r24
		sts		0x60, r17
		sts		0x60, r16
	#endasm
#endif
    u8Wdtcsr = u8Wdtcsr;
}
 ace:	08 95       	ret

00000ad0 <Compiler_LPMReadWord>:


void Compiler_LPMReadWord(u16 u16Addr, u16 *pu16Data)
{
#ifdef __GNUC__
	asm("mov 	r30, r24");
 ad0:	e8 2f       	mov	r30, r24
	asm("mov 	r31, r25");
 ad2:	f9 2f       	mov	r31, r25
	asm("lpm	r24, z+");
 ad4:	85 91       	lpm	r24, Z+
	asm("lpm	r25, z");
 ad6:	94 91       	lpm	r25, Z+
	asm("mov	r30, r22");
 ad8:	e6 2f       	mov	r30, r22
	asm("mov	r31, r23");
 ada:	f7 2f       	mov	r31, r23
	asm("st	    z+, r24");
 adc:	81 93       	st	Z+, r24
	asm("st	    z, r25");
 ade:	90 83       	st	Z, r25
		st		z,	 r19
	#endasm
#endif
	u16Addr = u16Addr;
	pu16Data = pu16Data;
}
 ae0:	08 95       	ret

00000ae2 <_exit>:
 ae2:	f8 94       	cli

00000ae4 <__stop_program>:
 ae4:	ff cf       	rjmp	.-2      	; 0xae4 <__stop_program>
