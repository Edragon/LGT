
lgt8f328p_spi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00000544  000005b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000544  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000060  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000166  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000982  00000000  00000000  000007c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000305  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000009df  00000000  00000000  0000144d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  00001e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ca  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002e9  00000000  00000000  00002126  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000240f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a8 34       	cpi	r26, 0x48	; 72
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 a0 02 	jmp	0x540	; 0x540 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
};


int main(void)
{
	OSCCAL = 0xb0;
  96:	80 eb       	ldi	r24, 0xB0	; 176
  98:	80 93 66 00 	sts	0x0066, r24

	CLKPR = 0x81;
  9c:	81 e8       	ldi	r24, 0x81	; 129
  9e:	80 93 61 00 	sts	0x0061, r24
	CLKPR = 0x81;
  a2:	80 93 61 00 	sts	0x0061, r24

	uart_init();
  a6:	0e 94 8d 02 	call	0x51a	; 0x51a <uart_init>

	w25q64_test(sen_buf, rec_buf);
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	64 e2       	ldi	r22, 0x24	; 36
  b0:	71 e0       	ldi	r23, 0x01	; 1
  b2:	0e 94 10 02 	call	0x420	; 0x420 <w25q64_test>
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x20>

000000b8 <spi_init>:
#include "../inc/allinone.h"

void spi_init(void)
{
	// set PB2, PB3 & PB5 as output
	DDRB |= (1 << PB3) | (1 << PB5) | (1 << PB2);
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	8c 62       	ori	r24, 0x2C	; 44
  bc:	84 b9       	out	0x04, r24	; 4

	// master, MSB first, mode 0
	SPCR = (1 << MSTR);
  be:	80 e1       	ldi	r24, 0x10	; 16
  c0:	8c bd       	out	0x2c, r24	; 44

	// stop timer0
	SPSR = 0x0;
  c2:	1d bc       	out	0x2d, r1	; 45

	// enable spi
	SPCR |= (1 << SPE);
  c4:	8c b5       	in	r24, 0x2c	; 44
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	8c bd       	out	0x2c, r24	; 44
}
  ca:	08 95       	ret

000000cc <spi_stop>:

void spi_stop (void)
{
    SPCR = (0 << SPE) | (0 << MSTR);
  cc:	1c bc       	out	0x2c, r1	; 44
}
  ce:	08 95       	ret

000000d0 <spi_send_char>:

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
  d0:	8e bd       	out	0x2e, r24	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
  d2:	ce 99       	sbic	0x19, 6	; 25
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <spi_send_char+0x2>

	DrvSPI_ClearPtr();	
  d6:	84 e4       	ldi	r24, 0x44	; 68
  d8:	89 bb       	out	0x19, r24	; 25
}
  da:	08 95       	ret

000000dc <spi_recv_char>:
unsigned char spi_recv_char(unsigned char cdat)
{
	unsigned char rcvd;

	// write data into SPDR
	DrvSPI_SendByte(cdat);
  dc:	8e bd       	out	0x2e, r24	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
  de:	ce 99       	sbic	0x19, 6	; 25
  e0:	fe cf       	rjmp	.-4      	; 0xde <spi_recv_char+0x2>
	
	// read SPDR
	rcvd = DrvSPI_GetByte();
  e2:	8e b5       	in	r24, 0x2e	; 46

	DrvSPI_ClearPtr();
  e4:	94 e4       	ldi	r25, 0x44	; 68
  e6:	99 bb       	out	0x19, r25	; 25

	return rcvd;
}
  e8:	08 95       	ret

000000ea <spi_dualrecv_char>:
unsigned int spi_dualrecv_char(unsigned char cdat)
{
	unsigned int rcvd;

	// write data into SPDR
	DrvSPI_SendByte(cdat);
  ea:	8e bd       	out	0x2e, r24	; 46
	DrvSPI_SendByte(cdat);
  ec:	8e bd       	out	0x2e, r24	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
  ee:	ce 99       	sbic	0x19, 6	; 25
  f0:	fe cf       	rjmp	.-4      	; 0xee <spi_dualrecv_char+0x4>
	
	// read SPDR
	rcvd = DrvSPI_GetByte();
  f2:	2e b5       	in	r18, 0x2e	; 46

	while((DrvSPI_IsBufEmpt())); 
  f4:	ce 99       	sbic	0x19, 6	; 25
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <spi_dualrecv_char+0xa>

	rcvd = (DrvSPI_GetByte() << 8) | rcvd;
  f8:	4e b5       	in	r20, 0x2e	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
	
	// read SPDR
	rcvd = DrvSPI_GetByte();
  fa:	30 e0       	ldi	r19, 0x00	; 0

	while((DrvSPI_IsBufEmpt())); 

	rcvd = (DrvSPI_GetByte() << 8) | rcvd;

	DrvSPI_ClearPtr();
  fc:	84 e4       	ldi	r24, 0x44	; 68
  fe:	89 bb       	out	0x19, r24	; 25
 100:	94 2f       	mov	r25, r20
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	28 2b       	or	r18, r24
 106:	39 2b       	or	r19, r25

	return rcvd;
}
 108:	c9 01       	movw	r24, r18
 10a:	08 95       	ret

0000010c <spi_read_jedid>:

void spi_read_jedid(unsigned char *rbuf)
{
 10c:	bc 01       	movw	r22, r24
	unsigned char i;
	unsigned rdsr;
		
	DrvSPI_SPSSOff();
 10e:	2a 9a       	sbi	0x05, 2	; 5

	DrvSPI_SPSSOn();
 110:	2a 98       	cbi	0x05, 2	; 5
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	8e bd       	out	0x2e, r24	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 116:	ce 99       	sbic	0x19, 6	; 25
 118:	fe cf       	rjmp	.-4      	; 0x116 <spi_read_jedid+0xa>

	DrvSPI_ClearPtr();	
 11a:	84 e4       	ldi	r24, 0x44	; 68
 11c:	89 bb       	out	0x19, r24	; 25
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
	while((DrvSPI_IsBufEmpt())); 
	
	// read SPDR
	rcvd = DrvSPI_GetByte();

	DrvSPI_ClearPtr();
 122:	44 e4       	ldi	r20, 0x44	; 68
 124:	06 c0       	rjmp	.+12     	; 0x132 <spi_read_jedid+0x26>
unsigned char spi_recv_char(unsigned char cdat)
{
	unsigned char rcvd;

	// write data into SPDR
	DrvSPI_SendByte(cdat);
 126:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 128:	ce 99       	sbic	0x19, 6	; 25
 12a:	fe cf       	rjmp	.-4      	; 0x128 <spi_read_jedid+0x1c>
	
	// read SPDR
	rcvd = DrvSPI_GetByte();
 12c:	8e b5       	in	r24, 0x2e	; 46

	DrvSPI_ClearPtr();
 12e:	49 bb       	out	0x19, r20	; 25
	
	spi_send_char(SPI_FLASH_RS);
	
	rdsr = 0x01;
	
	while ((rdsr&0x01) == 0x01) { rdsr = spi_recv_char(0x0); }	
 130:	28 2f       	mov	r18, r24
 132:	20 fd       	sbrc	r18, 0
 134:	f8 cf       	rjmp	.-16     	; 0x126 <spi_read_jedid+0x1a>
	
	DrvSPI_SPSSOff();
 136:	2a 9a       	sbi	0x05, 2	; 5
 138:	80 e0       	ldi	r24, 0x00	; 0
	
	for(i=0; i<0x18; i++) {NOP();}
 13a:	00 00       	nop
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	88 31       	cpi	r24, 0x18	; 24
 140:	e1 f7       	brne	.-8      	; 0x13a <spi_read_jedid+0x2e>

	DrvSPI_SPSSOn();
 142:	2a 98       	cbi	0x05, 2	; 5
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 144:	8f e9       	ldi	r24, 0x9F	; 159
 146:	8e bd       	out	0x2e, r24	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 148:	ce 99       	sbic	0x19, 6	; 25
 14a:	fe cf       	rjmp	.-4      	; 0x148 <spi_read_jedid+0x3c>

	DrvSPI_ClearPtr();	
 14c:	84 e4       	ldi	r24, 0x44	; 68
 14e:	89 bb       	out	0x19, r24	; 25
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
	while((DrvSPI_IsBufEmpt())); 
	
	// read SPDR
	rcvd = DrvSPI_GetByte();

	DrvSPI_ClearPtr();
 154:	94 e4       	ldi	r25, 0x44	; 68
unsigned char spi_recv_char(unsigned char cdat)
{
	unsigned char rcvd;

	// write data into SPDR
	DrvSPI_SendByte(cdat);
 156:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 158:	ce 99       	sbic	0x19, 6	; 25
 15a:	fe cf       	rjmp	.-4      	; 0x158 <spi_read_jedid+0x4c>
	
	// read SPDR
	rcvd = DrvSPI_GetByte();
 15c:	8e b5       	in	r24, 0x2e	; 46

	DrvSPI_ClearPtr();
 15e:	99 bb       	out	0x19, r25	; 25

	DrvSPI_SPSSOn();
	
	spi_send_char(SPI_FLASH_RJ);
	
   	for(i=0; i<3; i++) { rbuf[i] = spi_recv_char(0x0); }
 160:	fb 01       	movw	r30, r22
 162:	e2 0f       	add	r30, r18
 164:	f3 1f       	adc	r31, r19
 166:	80 83       	st	Z, r24
 168:	2f 5f       	subi	r18, 0xFF	; 255
 16a:	3f 4f       	sbci	r19, 0xFF	; 255
 16c:	23 30       	cpi	r18, 0x03	; 3
 16e:	31 05       	cpc	r19, r1
 170:	91 f7       	brne	.-28     	; 0x156 <spi_read_jedid+0x4a>
	
	DrvSPI_SPSSOff();
 172:	2a 9a       	sbi	0x05, 2	; 5
}
 174:	08 95       	ret

00000176 <spi_read_manid>:

void spi_read_manid(unsigned char *rbuf)
{
 176:	bc 01       	movw	r22, r24
	unsigned char i;
	unsigned char rdsr;
	
	DrvSPI_SPSSOff();
 178:	2a 9a       	sbi	0x05, 2	; 5
	DrvSPI_SPSSOn();
 17a:	2a 98       	cbi	0x05, 2	; 5
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 17c:	85 e0       	ldi	r24, 0x05	; 5
 17e:	8e bd       	out	0x2e, r24	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 180:	ce 99       	sbic	0x19, 6	; 25
 182:	fe cf       	rjmp	.-4      	; 0x180 <spi_read_manid+0xa>

	DrvSPI_ClearPtr();	
 184:	84 e4       	ldi	r24, 0x44	; 68
 186:	89 bb       	out	0x19, r24	; 25
 188:	81 e0       	ldi	r24, 0x01	; 1
	while((DrvSPI_IsBufEmpt())); 
	
	// read SPDR
	rcvd = DrvSPI_GetByte();

	DrvSPI_ClearPtr();
 18a:	24 e4       	ldi	r18, 0x44	; 68
 18c:	05 c0       	rjmp	.+10     	; 0x198 <spi_read_manid+0x22>
unsigned char spi_recv_char(unsigned char cdat)
{
	unsigned char rcvd;

	// write data into SPDR
	DrvSPI_SendByte(cdat);
 18e:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 190:	ce 99       	sbic	0x19, 6	; 25
 192:	fe cf       	rjmp	.-4      	; 0x190 <spi_read_manid+0x1a>
	
	// read SPDR
	rcvd = DrvSPI_GetByte();
 194:	8e b5       	in	r24, 0x2e	; 46

	DrvSPI_ClearPtr();
 196:	29 bb       	out	0x19, r18	; 25
	
	spi_send_char(SPI_FLASH_RS);
	
	rdsr = 0x01;
	
	while ((rdsr&0x01) == 0x01 ) { rdsr = spi_recv_char(0x0); }	
 198:	80 fd       	sbrc	r24, 0
 19a:	f9 cf       	rjmp	.-14     	; 0x18e <spi_read_manid+0x18>
	
	DrvSPI_SPSSOff();
 19c:	2a 9a       	sbi	0x05, 2	; 5
 19e:	80 e0       	ldi	r24, 0x00	; 0
	
	for(i=0; i<0x18; i++) {NOP();}
 1a0:	00 00       	nop
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	88 31       	cpi	r24, 0x18	; 24
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <spi_read_manid+0x2a>

	DrvSPI_SPSSOn();
 1a8:	2a 98       	cbi	0x05, 2	; 5
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 1aa:	80 e9       	ldi	r24, 0x90	; 144
 1ac:	8e bd       	out	0x2e, r24	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 1ae:	ce 99       	sbic	0x19, 6	; 25
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <spi_read_manid+0x38>

	DrvSPI_ClearPtr();	
 1b2:	84 e4       	ldi	r24, 0x44	; 68
 1b4:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 1b6:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 1b8:	ce 99       	sbic	0x19, 6	; 25
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <spi_read_manid+0x42>

	DrvSPI_ClearPtr();	
 1bc:	84 e4       	ldi	r24, 0x44	; 68
 1be:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 1c0:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 1c2:	ce 99       	sbic	0x19, 6	; 25
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <spi_read_manid+0x4c>

	DrvSPI_ClearPtr();	
 1c6:	84 e4       	ldi	r24, 0x44	; 68
 1c8:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 1ca:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 1cc:	ce 99       	sbic	0x19, 6	; 25
 1ce:	fe cf       	rjmp	.-4      	; 0x1cc <spi_read_manid+0x56>

	DrvSPI_ClearPtr();	
 1d0:	84 e4       	ldi	r24, 0x44	; 68
 1d2:	89 bb       	out	0x19, r24	; 25
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0
	while((DrvSPI_IsBufEmpt())); 
	
	// read SPDR
	rcvd = DrvSPI_GetByte();

	DrvSPI_ClearPtr();
 1d8:	44 e4       	ldi	r20, 0x44	; 68
unsigned char spi_recv_char(unsigned char cdat)
{
	unsigned char rcvd;

	// write data into SPDR
	DrvSPI_SendByte(cdat);
 1da:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 1dc:	ce 99       	sbic	0x19, 6	; 25
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <spi_read_manid+0x66>
	
	// read SPDR
	rcvd = DrvSPI_GetByte();
 1e0:	8e b5       	in	r24, 0x2e	; 46

	DrvSPI_ClearPtr();
 1e2:	49 bb       	out	0x19, r20	; 25
	spi_send_char(SPI_FLASH_RI);
	spi_send_char(0x0);
	spi_send_char(0x0);
	spi_send_char(0x0);
	
    for(i=0; i<2; i++) { rbuf[i] = spi_recv_char(0x0); }
 1e4:	fb 01       	movw	r30, r22
 1e6:	e2 0f       	add	r30, r18
 1e8:	f3 1f       	adc	r31, r19
 1ea:	80 83       	st	Z, r24
 1ec:	2f 5f       	subi	r18, 0xFF	; 255
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
 1f0:	22 30       	cpi	r18, 0x02	; 2
 1f2:	31 05       	cpc	r19, r1
 1f4:	91 f7       	brne	.-28     	; 0x1da <spi_read_manid+0x64>
	
	DrvSPI_SPSSOff();
 1f6:	2a 9a       	sbi	0x05, 2	; 5
}
 1f8:	08 95       	ret

000001fa <spi_read_flash>:

void spi_read_flash(unsigned char addr, unsigned char leng, unsigned char *rbuf)
{
 1fa:	98 2f       	mov	r25, r24
    unsigned char i;

	DrvSPI_SPSSOff();
 1fc:	2a 9a       	sbi	0x05, 2	; 5
	DrvSPI_SPSSOn();
 1fe:	2a 98       	cbi	0x05, 2	; 5
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	8e bd       	out	0x2e, r24	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 204:	ce 99       	sbic	0x19, 6	; 25
 206:	fe cf       	rjmp	.-4      	; 0x204 <spi_read_flash+0xa>

	DrvSPI_ClearPtr();	
 208:	84 e4       	ldi	r24, 0x44	; 68
 20a:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 20c:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 20e:	ce 99       	sbic	0x19, 6	; 25
 210:	fe cf       	rjmp	.-4      	; 0x20e <spi_read_flash+0x14>

	DrvSPI_ClearPtr();	
 212:	84 e4       	ldi	r24, 0x44	; 68
 214:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 216:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 218:	ce 99       	sbic	0x19, 6	; 25
 21a:	fe cf       	rjmp	.-4      	; 0x218 <spi_read_flash+0x1e>

	DrvSPI_ClearPtr();	
 21c:	84 e4       	ldi	r24, 0x44	; 68
 21e:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 220:	9e bd       	out	0x2e, r25	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 222:	ce 99       	sbic	0x19, 6	; 25
 224:	fe cf       	rjmp	.-4      	; 0x222 <spi_read_flash+0x28>

	DrvSPI_ClearPtr();	
 226:	84 e4       	ldi	r24, 0x44	; 68
 228:	89 bb       	out	0x19, r24	; 25
 22a:	fa 01       	movw	r30, r20
 22c:	90 e0       	ldi	r25, 0x00	; 0
	while((DrvSPI_IsBufEmpt())); 
	
	// read SPDR
	rcvd = DrvSPI_GetByte();

	DrvSPI_ClearPtr();
 22e:	24 e4       	ldi	r18, 0x44	; 68
 230:	07 c0       	rjmp	.+14     	; 0x240 <spi_read_flash+0x46>
unsigned char spi_recv_char(unsigned char cdat)
{
	unsigned char rcvd;

	// write data into SPDR
	DrvSPI_SendByte(cdat);
 232:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 234:	ce 99       	sbic	0x19, 6	; 25
 236:	fe cf       	rjmp	.-4      	; 0x234 <spi_read_flash+0x3a>
	
	// read SPDR
	rcvd = DrvSPI_GetByte();
 238:	8e b5       	in	r24, 0x2e	; 46

	DrvSPI_ClearPtr();
 23a:	29 bb       	out	0x19, r18	; 25
	spi_send_char(SPI_FLASH_RD);
	spi_send_char(0x0);
	spi_send_char(0x0);
	spi_send_char(addr);
	
    for(i=0; i<leng; i++) { rbuf[i] = spi_recv_char(0x0); }
 23c:	81 93       	st	Z+, r24
 23e:	9f 5f       	subi	r25, 0xFF	; 255
 240:	96 17       	cp	r25, r22
 242:	b8 f3       	brcs	.-18     	; 0x232 <spi_read_flash+0x38>
	
	DrvSPI_SPSSOff();
 244:	2a 9a       	sbi	0x05, 2	; 5
}
 246:	08 95       	ret

00000248 <spi_erase_flash>:
void spi_erase_flash(void)
{	
    unsigned char i;
	unsigned char rdsr;
	
	DrvSPI_SPSSOff();
 248:	2a 9a       	sbi	0x05, 2	; 5
	DrvSPI_SPSSOn();
 24a:	2a 98       	cbi	0x05, 2	; 5
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 24c:	86 e0       	ldi	r24, 0x06	; 6
 24e:	8e bd       	out	0x2e, r24	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 250:	ce 99       	sbic	0x19, 6	; 25
 252:	fe cf       	rjmp	.-4      	; 0x250 <spi_erase_flash+0x8>

	DrvSPI_ClearPtr();	
 254:	84 e4       	ldi	r24, 0x44	; 68
 256:	89 bb       	out	0x19, r24	; 25
	DrvSPI_SPSSOff();
	DrvSPI_SPSSOn();
	
	spi_send_char(SPI_FLASH_WE);
	
	DrvSPI_SPSSOff();
 258:	2a 9a       	sbi	0x05, 2	; 5
 25a:	80 e0       	ldi	r24, 0x00	; 0
	
	for(i=0; i<0x18; i++) {NOP();}
 25c:	00 00       	nop
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	88 31       	cpi	r24, 0x18	; 24
 262:	e1 f7       	brne	.-8      	; 0x25c <spi_erase_flash+0x14>
	
	DrvSPI_SPSSOn();
 264:	2a 98       	cbi	0x05, 2	; 5
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 266:	80 e2       	ldi	r24, 0x20	; 32
 268:	8e bd       	out	0x2e, r24	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 26a:	ce 99       	sbic	0x19, 6	; 25
 26c:	fe cf       	rjmp	.-4      	; 0x26a <spi_erase_flash+0x22>

	DrvSPI_ClearPtr();	
 26e:	84 e4       	ldi	r24, 0x44	; 68
 270:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 272:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 274:	ce 99       	sbic	0x19, 6	; 25
 276:	fe cf       	rjmp	.-4      	; 0x274 <spi_erase_flash+0x2c>

	DrvSPI_ClearPtr();	
 278:	84 e4       	ldi	r24, 0x44	; 68
 27a:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 27c:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 27e:	ce 99       	sbic	0x19, 6	; 25
 280:	fe cf       	rjmp	.-4      	; 0x27e <spi_erase_flash+0x36>

	DrvSPI_ClearPtr();	
 282:	84 e4       	ldi	r24, 0x44	; 68
 284:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 286:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 288:	ce 99       	sbic	0x19, 6	; 25
 28a:	fe cf       	rjmp	.-4      	; 0x288 <spi_erase_flash+0x40>

	DrvSPI_ClearPtr();	
 28c:	84 e4       	ldi	r24, 0x44	; 68
 28e:	89 bb       	out	0x19, r24	; 25
	spi_send_char(SPI_FLASH_SE);
	spi_send_char(0x00);
	spi_send_char(0x00);
	spi_send_char(0x00);
	
	DrvSPI_SPSSOff();
 290:	2a 9a       	sbi	0x05, 2	; 5
 292:	80 e0       	ldi	r24, 0x00	; 0
	
	for(i=0; i<0x18; i++) {NOP();}
 294:	00 00       	nop
 296:	8f 5f       	subi	r24, 0xFF	; 255
 298:	88 31       	cpi	r24, 0x18	; 24
 29a:	e1 f7       	brne	.-8      	; 0x294 <spi_erase_flash+0x4c>
	
	DrvSPI_SPSSOn();
 29c:	2a 98       	cbi	0x05, 2	; 5
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 29e:	85 e0       	ldi	r24, 0x05	; 5
 2a0:	8e bd       	out	0x2e, r24	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 2a2:	ce 99       	sbic	0x19, 6	; 25
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <spi_erase_flash+0x5a>

	DrvSPI_ClearPtr();	
 2a6:	84 e4       	ldi	r24, 0x44	; 68
 2a8:	89 bb       	out	0x19, r24	; 25
 2aa:	81 e0       	ldi	r24, 0x01	; 1
	while((DrvSPI_IsBufEmpt())); 
	
	// read SPDR
	rcvd = DrvSPI_GetByte();

	DrvSPI_ClearPtr();
 2ac:	94 e4       	ldi	r25, 0x44	; 68
 2ae:	05 c0       	rjmp	.+10     	; 0x2ba <spi_erase_flash+0x72>
unsigned char spi_recv_char(unsigned char cdat)
{
	unsigned char rcvd;

	// write data into SPDR
	DrvSPI_SendByte(cdat);
 2b0:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 2b2:	ce 99       	sbic	0x19, 6	; 25
 2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <spi_erase_flash+0x6a>
	
	// read SPDR
	rcvd = DrvSPI_GetByte();
 2b6:	8e b5       	in	r24, 0x2e	; 46

	DrvSPI_ClearPtr();
 2b8:	99 bb       	out	0x19, r25	; 25
	
	spi_send_char(SPI_FLASH_RS);
	
	rdsr = 0x01;
	
	while ((rdsr&0x01) == 0x01 ) { rdsr = spi_recv_char(0x0); }	
 2ba:	80 fd       	sbrc	r24, 0
 2bc:	f9 cf       	rjmp	.-14     	; 0x2b0 <spi_erase_flash+0x68>
	
	DrvSPI_SPSSOff();
 2be:	2a 9a       	sbi	0x05, 2	; 5
}
 2c0:	08 95       	ret

000002c2 <spi_prog_flash>:

void spi_prog_flash(unsigned char addr, unsigned char leng, unsigned char *wbuf)
{
 2c2:	98 2f       	mov	r25, r24
    unsigned char i;
	unsigned char rdsr;
	
	DrvSPI_SPSSOff();
 2c4:	2a 9a       	sbi	0x05, 2	; 5
	DrvSPI_SPSSOn();
 2c6:	2a 98       	cbi	0x05, 2	; 5
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 2c8:	86 e0       	ldi	r24, 0x06	; 6
 2ca:	8e bd       	out	0x2e, r24	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 2cc:	ce 99       	sbic	0x19, 6	; 25
 2ce:	fe cf       	rjmp	.-4      	; 0x2cc <spi_prog_flash+0xa>

	DrvSPI_ClearPtr();	
 2d0:	84 e4       	ldi	r24, 0x44	; 68
 2d2:	89 bb       	out	0x19, r24	; 25
	DrvSPI_SPSSOff();
	DrvSPI_SPSSOn();
	
	spi_send_char(SPI_FLASH_WE);
	
	DrvSPI_SPSSOff();
 2d4:	2a 9a       	sbi	0x05, 2	; 5
 2d6:	80 e0       	ldi	r24, 0x00	; 0
	
	for(i=0; i<0x18; i++) {NOP();}
 2d8:	00 00       	nop
 2da:	8f 5f       	subi	r24, 0xFF	; 255
 2dc:	88 31       	cpi	r24, 0x18	; 24
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <spi_prog_flash+0x16>
	
	DrvSPI_SPSSOn();
 2e0:	2a 98       	cbi	0x05, 2	; 5
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	8e bd       	out	0x2e, r24	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 2e6:	ce 99       	sbic	0x19, 6	; 25
 2e8:	fe cf       	rjmp	.-4      	; 0x2e6 <spi_prog_flash+0x24>

	DrvSPI_ClearPtr();	
 2ea:	84 e4       	ldi	r24, 0x44	; 68
 2ec:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 2ee:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 2f0:	ce 99       	sbic	0x19, 6	; 25
 2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <spi_prog_flash+0x2e>

	DrvSPI_ClearPtr();	
 2f4:	84 e4       	ldi	r24, 0x44	; 68
 2f6:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 2f8:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 2fa:	ce 99       	sbic	0x19, 6	; 25
 2fc:	fe cf       	rjmp	.-4      	; 0x2fa <spi_prog_flash+0x38>

	DrvSPI_ClearPtr();	
 2fe:	84 e4       	ldi	r24, 0x44	; 68
 300:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 302:	9e bd       	out	0x2e, r25	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 304:	ce 99       	sbic	0x19, 6	; 25
 306:	fe cf       	rjmp	.-4      	; 0x304 <spi_prog_flash+0x42>

	DrvSPI_ClearPtr();	
 308:	84 e4       	ldi	r24, 0x44	; 68
 30a:	89 bb       	out	0x19, r24	; 25
 30c:	fa 01       	movw	r30, r20
 30e:	90 e0       	ldi	r25, 0x00	; 0
	spi_send_char(SPI_FLASH_PP);
	spi_send_char(0x0);
	spi_send_char(0x0);
	spi_send_char(addr);
	
    for(i=0; i<leng; i++) {	spi_send_char(wbuf[i]); }
 310:	24 e4       	ldi	r18, 0x44	; 68
 312:	07 c0       	rjmp	.+14     	; 0x322 <spi_prog_flash+0x60>
 314:	80 81       	ld	r24, Z
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 316:	8e bd       	out	0x2e, r24	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 318:	ce 99       	sbic	0x19, 6	; 25
 31a:	fe cf       	rjmp	.-4      	; 0x318 <spi_prog_flash+0x56>

	DrvSPI_ClearPtr();	
 31c:	29 bb       	out	0x19, r18	; 25
	spi_send_char(SPI_FLASH_PP);
	spi_send_char(0x0);
	spi_send_char(0x0);
	spi_send_char(addr);
	
    for(i=0; i<leng; i++) {	spi_send_char(wbuf[i]); }
 31e:	9f 5f       	subi	r25, 0xFF	; 255
 320:	31 96       	adiw	r30, 0x01	; 1
 322:	96 17       	cp	r25, r22
 324:	b8 f3       	brcs	.-18     	; 0x314 <spi_prog_flash+0x52>
	
	DrvSPI_SPSSOff();
 326:	2a 9a       	sbi	0x05, 2	; 5
 328:	80 e0       	ldi	r24, 0x00	; 0
	
	for(i=0; i<0x18; i++) {NOP();}
 32a:	00 00       	nop
 32c:	8f 5f       	subi	r24, 0xFF	; 255
 32e:	88 31       	cpi	r24, 0x18	; 24
 330:	e1 f7       	brne	.-8      	; 0x32a <spi_prog_flash+0x68>
	
	DrvSPI_SPSSOn();
 332:	2a 98       	cbi	0x05, 2	; 5
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 334:	85 e0       	ldi	r24, 0x05	; 5
 336:	8e bd       	out	0x2e, r24	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 338:	ce 99       	sbic	0x19, 6	; 25
 33a:	fe cf       	rjmp	.-4      	; 0x338 <spi_prog_flash+0x76>

	DrvSPI_ClearPtr();	
 33c:	84 e4       	ldi	r24, 0x44	; 68
 33e:	89 bb       	out	0x19, r24	; 25
 340:	81 e0       	ldi	r24, 0x01	; 1
	while((DrvSPI_IsBufEmpt())); 
	
	// read SPDR
	rcvd = DrvSPI_GetByte();

	DrvSPI_ClearPtr();
 342:	94 e4       	ldi	r25, 0x44	; 68
 344:	05 c0       	rjmp	.+10     	; 0x350 <spi_prog_flash+0x8e>
unsigned char spi_recv_char(unsigned char cdat)
{
	unsigned char rcvd;

	// write data into SPDR
	DrvSPI_SendByte(cdat);
 346:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 348:	ce 99       	sbic	0x19, 6	; 25
 34a:	fe cf       	rjmp	.-4      	; 0x348 <spi_prog_flash+0x86>
	
	// read SPDR
	rcvd = DrvSPI_GetByte();
 34c:	8e b5       	in	r24, 0x2e	; 46

	DrvSPI_ClearPtr();
 34e:	99 bb       	out	0x19, r25	; 25
	
	spi_send_char(SPI_FLASH_RS);
	
	rdsr = 0x01;
	
	while ((rdsr&0x01) == 0x01 ) { rdsr = spi_recv_char(0x0); }	
 350:	80 fd       	sbrc	r24, 0
 352:	f9 cf       	rjmp	.-14     	; 0x346 <spi_prog_flash+0x84>
	
	DrvSPI_SPSSOff();
 354:	2a 9a       	sbi	0x05, 2	; 5
}	
 356:	08 95       	ret

00000358 <spi_fastrd_flash>:

void spi_fastrd_flash(unsigned char addr, unsigned char leng, unsigned char *rbuf)
{
 358:	98 2f       	mov	r25, r24
    unsigned char i;

	DrvSPI_SPSSOff();
 35a:	2a 9a       	sbi	0x05, 2	; 5
	DrvSPI_SPSSOn();
 35c:	2a 98       	cbi	0x05, 2	; 5
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 35e:	8b e0       	ldi	r24, 0x0B	; 11
 360:	8e bd       	out	0x2e, r24	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 362:	ce 99       	sbic	0x19, 6	; 25
 364:	fe cf       	rjmp	.-4      	; 0x362 <spi_fastrd_flash+0xa>

	DrvSPI_ClearPtr();	
 366:	84 e4       	ldi	r24, 0x44	; 68
 368:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 36a:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 36c:	ce 99       	sbic	0x19, 6	; 25
 36e:	fe cf       	rjmp	.-4      	; 0x36c <spi_fastrd_flash+0x14>

	DrvSPI_ClearPtr();	
 370:	84 e4       	ldi	r24, 0x44	; 68
 372:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 374:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 376:	ce 99       	sbic	0x19, 6	; 25
 378:	fe cf       	rjmp	.-4      	; 0x376 <spi_fastrd_flash+0x1e>

	DrvSPI_ClearPtr();	
 37a:	84 e4       	ldi	r24, 0x44	; 68
 37c:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 37e:	9e bd       	out	0x2e, r25	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 380:	ce 99       	sbic	0x19, 6	; 25
 382:	fe cf       	rjmp	.-4      	; 0x380 <spi_fastrd_flash+0x28>

	DrvSPI_ClearPtr();	
 384:	84 e4       	ldi	r24, 0x44	; 68
 386:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 388:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 38a:	ce 99       	sbic	0x19, 6	; 25
 38c:	fe cf       	rjmp	.-4      	; 0x38a <spi_fastrd_flash+0x32>

	DrvSPI_ClearPtr();	
 38e:	84 e4       	ldi	r24, 0x44	; 68
 390:	89 bb       	out	0x19, r24	; 25
 392:	fa 01       	movw	r30, r20
 394:	90 e0       	ldi	r25, 0x00	; 0
	while((DrvSPI_IsBufEmpt())); 
	
	// read SPDR
	rcvd = DrvSPI_GetByte();

	DrvSPI_ClearPtr();
 396:	24 e4       	ldi	r18, 0x44	; 68
 398:	07 c0       	rjmp	.+14     	; 0x3a8 <spi_fastrd_flash+0x50>
unsigned char spi_recv_char(unsigned char cdat)
{
	unsigned char rcvd;

	// write data into SPDR
	DrvSPI_SendByte(cdat);
 39a:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 39c:	ce 99       	sbic	0x19, 6	; 25
 39e:	fe cf       	rjmp	.-4      	; 0x39c <spi_fastrd_flash+0x44>
	
	// read SPDR
	rcvd = DrvSPI_GetByte();
 3a0:	8e b5       	in	r24, 0x2e	; 46

	DrvSPI_ClearPtr();
 3a2:	29 bb       	out	0x19, r18	; 25
	spi_send_char(0x0);
	spi_send_char(addr);
	
	spi_send_char(0x0); // dummy
	
    for(i=0; i<leng; i++) { rbuf[i] = spi_recv_char(0x0); }
 3a4:	81 93       	st	Z+, r24
 3a6:	9f 5f       	subi	r25, 0xFF	; 255
 3a8:	96 17       	cp	r25, r22
 3aa:	b8 f3       	brcs	.-18     	; 0x39a <spi_fastrd_flash+0x42>
	
	DrvSPI_SPSSOff();
 3ac:	2a 9a       	sbi	0x05, 2	; 5
}
 3ae:	08 95       	ret

000003b0 <spi_dualrd_flash>:

void spi_dualrd_flash(unsigned char addr, unsigned char leng, unsigned char *rbuf)
{
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	98 2f       	mov	r25, r24
 3ba:	ea 01       	movw	r28, r20
    unsigned char i;	
	unsigned int  rcvd;

	DrvSPI_SPSSOff();
 3bc:	2a 9a       	sbi	0x05, 2	; 5
	DrvSPI_SPSSOn();
 3be:	2a 98       	cbi	0x05, 2	; 5
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 3c0:	8b e3       	ldi	r24, 0x3B	; 59
 3c2:	8e bd       	out	0x2e, r24	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 3c4:	ce 99       	sbic	0x19, 6	; 25
 3c6:	fe cf       	rjmp	.-4      	; 0x3c4 <spi_dualrd_flash+0x14>

	DrvSPI_ClearPtr();	
 3c8:	84 e4       	ldi	r24, 0x44	; 68
 3ca:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 3cc:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 3ce:	ce 99       	sbic	0x19, 6	; 25
 3d0:	fe cf       	rjmp	.-4      	; 0x3ce <spi_dualrd_flash+0x1e>

	DrvSPI_ClearPtr();	
 3d2:	84 e4       	ldi	r24, 0x44	; 68
 3d4:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 3d6:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 3d8:	ce 99       	sbic	0x19, 6	; 25
 3da:	fe cf       	rjmp	.-4      	; 0x3d8 <spi_dualrd_flash+0x28>

	DrvSPI_ClearPtr();	
 3dc:	84 e4       	ldi	r24, 0x44	; 68
 3de:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 3e0:	9e bd       	out	0x2e, r25	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 3e2:	ce 99       	sbic	0x19, 6	; 25
 3e4:	fe cf       	rjmp	.-4      	; 0x3e2 <spi_dualrd_flash+0x32>

	DrvSPI_ClearPtr();	
 3e6:	84 e4       	ldi	r24, 0x44	; 68
 3e8:	89 bb       	out	0x19, r24	; 25
}

void spi_send_char(unsigned char cdat)
{
	// write data into SPDR
	DrvSPI_SendByte(cdat);
 3ea:	1e bc       	out	0x2e, r1	; 46

	// read SPSR to check that if receive buffer is not empty
	while((DrvSPI_IsBufEmpt())); 
 3ec:	ce 99       	sbic	0x19, 6	; 25
 3ee:	fe cf       	rjmp	.-4      	; 0x3ec <spi_dualrd_flash+0x3c>

	DrvSPI_ClearPtr();	
 3f0:	84 e4       	ldi	r24, 0x44	; 68
 3f2:	89 bb       	out	0x19, r24	; 25
	spi_send_char(addr);
	
	spi_send_char(0x0); // dummy
//	*rbuf = SPDR; // read dummy data to clear buffer
	
	SPSR |= (1 << DUAL);
 3f4:	8d b5       	in	r24, 0x2d	; 45
 3f6:	84 60       	ori	r24, 0x04	; 4
 3f8:	8d bd       	out	0x2d, r24	; 45
	leng = leng >>1;
 3fa:	06 2f       	mov	r16, r22
 3fc:	06 95       	lsr	r16
 3fe:	10 e0       	ldi	r17, 0x00	; 0
 400:	07 c0       	rjmp	.+14     	; 0x410 <spi_dualrd_flash+0x60>
	
	for(i=0; i<leng; i++)
	{
	    rcvd = spi_dualrecv_char(0x0);	
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	0e 94 75 00 	call	0xea	; 0xea <spi_dualrecv_char>
		*rbuf = rcvd;	
 408:	88 83       	st	Y, r24
		rbuf++;
		*rbuf = rcvd >> 8;
 40a:	99 83       	std	Y+1, r25	; 0x01
	
	DrvSPI_SPSSOff();
}

void spi_dualrd_flash(unsigned char addr, unsigned char leng, unsigned char *rbuf)
{
 40c:	22 96       	adiw	r28, 0x02	; 2
//	*rbuf = SPDR; // read dummy data to clear buffer
	
	SPSR |= (1 << DUAL);
	leng = leng >>1;
	
	for(i=0; i<leng; i++)
 40e:	1f 5f       	subi	r17, 0xFF	; 255
 410:	10 17       	cp	r17, r16
 412:	b8 f3       	brcs	.-18     	; 0x402 <spi_dualrd_flash+0x52>
		rbuf++;
		*rbuf = rcvd >> 8;
		rbuf++;
	}
	
	DrvSPI_SPSSOff();
 414:	2a 9a       	sbi	0x05, 2	; 5
}
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	08 95       	ret

00000420 <w25q64_test>:


void w25q64_test (unsigned char *dat_wbuf, unsigned char *dat_rbuf)
{
 420:	ef 92       	push	r14
 422:	ff 92       	push	r15
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	7c 01       	movw	r14, r24
 42e:	8b 01       	movw	r16, r22
	unsigned char i;
	spi_init();
 430:	0e 94 5c 00 	call	0xb8	; 0xb8 <spi_init>

	spi_read_jedid(dat_rbuf);
 434:	c8 01       	movw	r24, r16
 436:	0e 94 86 00 	call	0x10c	; 0x10c <spi_read_jedid>
	// read Device ID 
	for(i=0; i<0x3; i++) { uart_send_char(dat_rbuf[i]); }
 43a:	f8 01       	movw	r30, r16
 43c:	80 81       	ld	r24, Z
 43e:	0e 94 98 02 	call	0x530	; 0x530 <uart_send_char>
 442:	f8 01       	movw	r30, r16
 444:	81 81       	ldd	r24, Z+1	; 0x01
 446:	0e 94 98 02 	call	0x530	; 0x530 <uart_send_char>
 44a:	f8 01       	movw	r30, r16
 44c:	82 81       	ldd	r24, Z+2	; 0x02
 44e:	0e 94 98 02 	call	0x530	; 0x530 <uart_send_char>

	dat_rbuf[0] = 0x00;
 452:	f8 01       	movw	r30, r16
 454:	10 82       	st	Z, r1
	dat_rbuf[1] = 0x00;
 456:	11 82       	std	Z+1, r1	; 0x01
	spi_read_manid(dat_rbuf);
 458:	c8 01       	movw	r24, r16
 45a:	0e 94 bb 00 	call	0x176	; 0x176 <spi_read_manid>
	// read Manufacturer ID 
	for(i=0; i<0x2; i++) { uart_send_char(dat_rbuf[i]); }
 45e:	f8 01       	movw	r30, r16
 460:	80 81       	ld	r24, Z
 462:	0e 94 98 02 	call	0x530	; 0x530 <uart_send_char>
 466:	f8 01       	movw	r30, r16
 468:	81 81       	ldd	r24, Z+1	; 0x01
 46a:	0e 94 98 02 	call	0x530	; 0x530 <uart_send_char>
	
	dat_rbuf[0] = 0x00;
 46e:	f8 01       	movw	r30, r16
 470:	10 82       	st	Z, r1
	dat_rbuf[1] = 0x00;
 472:	11 82       	std	Z+1, r1	; 0x01
	spi_read_flash(0x0, 0x10, dat_rbuf);
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	60 e1       	ldi	r22, 0x10	; 16
 478:	a8 01       	movw	r20, r16
 47a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <spi_read_flash>
 47e:	c0 e0       	ldi	r28, 0x00	; 0
 480:	d0 e0       	ldi	r29, 0x00	; 0
	// read original flash data
	for(i=0; i<0x10; i++) {	uart_send_char(dat_rbuf[i]); }
 482:	f8 01       	movw	r30, r16
 484:	ec 0f       	add	r30, r28
 486:	fd 1f       	adc	r31, r29
 488:	80 81       	ld	r24, Z
 48a:	0e 94 98 02 	call	0x530	; 0x530 <uart_send_char>
 48e:	21 96       	adiw	r28, 0x01	; 1
 490:	c0 31       	cpi	r28, 0x10	; 16
 492:	d1 05       	cpc	r29, r1
 494:	b1 f7       	brne	.-20     	; 0x482 <w25q64_test+0x62>
	
	spi_erase_flash();
 496:	0e 94 24 01 	call	0x248	; 0x248 <spi_erase_flash>
	spi_read_flash(0x0, 0x10, dat_rbuf);
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	60 e1       	ldi	r22, 0x10	; 16
 49e:	a8 01       	movw	r20, r16
 4a0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <spi_read_flash>
 4a4:	c0 e0       	ldi	r28, 0x00	; 0
 4a6:	d0 e0       	ldi	r29, 0x00	; 0
	// read after erase, dat_rbuf must be 0xff
	for(i=0; i<0x10; i++) {	uart_send_char(dat_rbuf[i]); }
 4a8:	f8 01       	movw	r30, r16
 4aa:	ec 0f       	add	r30, r28
 4ac:	fd 1f       	adc	r31, r29
 4ae:	80 81       	ld	r24, Z
 4b0:	0e 94 98 02 	call	0x530	; 0x530 <uart_send_char>
 4b4:	21 96       	adiw	r28, 0x01	; 1
 4b6:	c0 31       	cpi	r28, 0x10	; 16
 4b8:	d1 05       	cpc	r29, r1
 4ba:	b1 f7       	brne	.-20     	; 0x4a8 <w25q64_test+0x88>
	
	spi_prog_flash(0x0, 0x10, dat_wbuf);	
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	60 e1       	ldi	r22, 0x10	; 16
 4c0:	a7 01       	movw	r20, r14
 4c2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <spi_prog_flash>
	
	spi_fastrd_flash(0x0, 0x10, dat_rbuf);
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	60 e1       	ldi	r22, 0x10	; 16
 4ca:	a8 01       	movw	r20, r16
 4cc:	0e 94 ac 01 	call	0x358	; 0x358 <spi_fastrd_flash>
 4d0:	c0 e0       	ldi	r28, 0x00	; 0
 4d2:	d0 e0       	ldi	r29, 0x00	; 0
	// fast read after program, dat_rbuf must be same as dat_wbuf
	for(i=0; i<0x10; i++) { uart_send_char(dat_rbuf[i]); }	
 4d4:	f8 01       	movw	r30, r16
 4d6:	ec 0f       	add	r30, r28
 4d8:	fd 1f       	adc	r31, r29
 4da:	80 81       	ld	r24, Z
 4dc:	0e 94 98 02 	call	0x530	; 0x530 <uart_send_char>
 4e0:	21 96       	adiw	r28, 0x01	; 1
 4e2:	c0 31       	cpi	r28, 0x10	; 16
 4e4:	d1 05       	cpc	r29, r1
 4e6:	b1 f7       	brne	.-20     	; 0x4d4 <w25q64_test+0xb4>
	
	spi_dualrd_flash(0x0, 0x10, dat_rbuf);
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	60 e1       	ldi	r22, 0x10	; 16
 4ec:	a8 01       	movw	r20, r16
 4ee:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <spi_dualrd_flash>
 4f2:	c0 e0       	ldi	r28, 0x00	; 0
 4f4:	d0 e0       	ldi	r29, 0x00	; 0
	// dual read after program, dat_rbuf must be same as dat_wbuf
	for(i=0; i<0x10; i++) { uart_send_char(dat_rbuf[i]); }
 4f6:	f8 01       	movw	r30, r16
 4f8:	ec 0f       	add	r30, r28
 4fa:	fd 1f       	adc	r31, r29
 4fc:	80 81       	ld	r24, Z
 4fe:	0e 94 98 02 	call	0x530	; 0x530 <uart_send_char>
 502:	21 96       	adiw	r28, 0x01	; 1
 504:	c0 31       	cpi	r28, 0x10	; 16
 506:	d1 05       	cpc	r29, r1
 508:	b1 f7       	brne	.-20     	; 0x4f6 <w25q64_test+0xd6>
	SPCR |= (1 << SPE);
}

void spi_stop (void)
{
    SPCR = (0 << SPE) | (0 << MSTR);
 50a:	1c bc       	out	0x2c, r1	; 44
	spi_dualrd_flash(0x0, 0x10, dat_rbuf);
	// dual read after program, dat_rbuf must be same as dat_wbuf
	for(i=0; i<0x10; i++) { uart_send_char(dat_rbuf[i]); }
	
	spi_stop();
}
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	1f 91       	pop	r17
 512:	0f 91       	pop	r16
 514:	ff 90       	pop	r15
 516:	ef 90       	pop	r14
 518:	08 95       	ret

0000051a <uart_init>:
#include "../inc/allinone.h"

void uart_init(void)
{
	// set UBRR = 51 as BAUDRATE = 19200
	UBRR0L = 51;
 51a:	83 e3       	ldi	r24, 0x33	; 51
 51c:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0;
 520:	10 92 c5 00 	sts	0x00C5, r1

	// enable tx
	UCSR0B |= (1 << TXEN0);
 524:	e1 ec       	ldi	r30, 0xC1	; 193
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	88 60       	ori	r24, 0x08	; 8
 52c:	80 83       	st	Z, r24

}
 52e:	08 95       	ret

00000530 <uart_send_char>:

void uart_send_char(unsigned char u8Char)
{
 530:	98 2f       	mov	r25, r24
	while(!(UCSR0A & (1 << UDRE0)));
 532:	80 91 c0 00 	lds	r24, 0x00C0
 536:	85 ff       	sbrs	r24, 5
 538:	fc cf       	rjmp	.-8      	; 0x532 <uart_send_char+0x2>
	UDR0 = u8Char;
 53a:	90 93 c6 00 	sts	0x00C6, r25
}
 53e:	08 95       	ret

00000540 <_exit>:
 540:	f8 94       	cli

00000542 <__stop_program>:
 542:	ff cf       	rjmp	.-2      	; 0x542 <__stop_program>
