
lgt8f328p_tc1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  00000230  2**0
                  ALLOC
  2 .debug_aranges 00000060  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a4  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001e7  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000118  00000000  00000000  0000051b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002c1  00000000  00000000  00000633  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  000008f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000df  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  88:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_13>:
// Enable Timer1 Overflow interrupt

// Change Duty Cycle through OCR1B

LGT_VECTOR(IVN_TC1_TOV)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	tov_cnt ++;
  a0:	80 91 00 01 	lds	r24, 0x0100
  a4:	90 91 01 01 	lds	r25, 0x0101
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	90 93 01 01 	sts	0x0101, r25
  ae:	80 93 00 01 	sts	0x0100, r24
	if ( tov_cnt == 0xbff )
  b2:	80 91 00 01 	lds	r24, 0x0100
  b6:	90 91 01 01 	lds	r25, 0x0101
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	9b 40       	sbci	r25, 0x0B	; 11
  be:	31 f5       	brne	.+76     	; 0x10c <__vector_13+0x7c>
	{
		tov_cnt = 0x0;
  c0:	10 92 01 01 	sts	0x0101, r1
  c4:	10 92 00 01 	sts	0x0100, r1
		dut_cyc ++;
  c8:	80 91 02 01 	lds	r24, 0x0102
  cc:	90 91 03 01 	lds	r25, 0x0103
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	90 93 03 01 	sts	0x0103, r25
  d6:	80 93 02 01 	sts	0x0102, r24
		if (dut_cyc > 0x7c) dut_cyc = 0x3;
  da:	80 91 02 01 	lds	r24, 0x0102
  de:	90 91 03 01 	lds	r25, 0x0103
  e2:	8d 37       	cpi	r24, 0x7D	; 125
  e4:	91 05       	cpc	r25, r1
  e6:	30 f0       	brcs	.+12     	; 0xf4 <__vector_13+0x64>
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 03 01 	sts	0x0103, r25
  f0:	80 93 02 01 	sts	0x0102, r24

		OCR1BH = dut_cyc >> 8;
  f4:	80 91 02 01 	lds	r24, 0x0102
  f8:	90 91 03 01 	lds	r25, 0x0103
  fc:	90 93 8b 00 	sts	0x008B, r25
		OCR1BL = dut_cyc;
 100:	80 91 02 01 	lds	r24, 0x0102
 104:	90 91 03 01 	lds	r25, 0x0103
 108:	80 93 8a 00 	sts	0x008A, r24
	}

}
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	2f 91       	pop	r18
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <main>:

#include "../inc/allinone.h"

int main(void)
{
	OSCCAL = 0xb0;
 11c:	80 eb       	ldi	r24, 0xB0	; 176
 11e:	80 93 66 00 	sts	0x0066, r24

	CLKPR = 0x81;
 122:	81 e8       	ldi	r24, 0x81	; 129
 124:	80 93 61 00 	sts	0x0061, r24
	CLKPR = 0x81;
 128:	80 93 61 00 	sts	0x0061, r24

	tc1_init();
 12c:	0e 94 a4 00 	call	0x148	; 0x148 <tc1_init>

	tov_cnt = 0x0;
 130:	10 92 01 01 	sts	0x0101, r1
 134:	10 92 00 01 	sts	0x0100, r1

	dut_cyc = 0x40;
 138:	80 e4       	ldi	r24, 0x40	; 64
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 03 01 	sts	0x0103, r25
 140:	80 93 02 01 	sts	0x0102, r24

	// Global interrupt enable
	SEI();
 144:	78 94       	sei
 146:	ff cf       	rjmp	.-2      	; 0x146 <main+0x2a>

00000148 <tc1_init>:
void tc1_init(void)
{
	unsigned char u8Sreg;

	// enable high speed clock
	TCKCSR = (1 << F2XEN);
 148:	ac ee       	ldi	r26, 0xEC	; 236
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	80 e4       	ldi	r24, 0x40	; 64
 14e:	8c 93       	st	X, r24

	// stop timer0
	TCCR1B = 0x0;
 150:	21 e8       	ldi	r18, 0x81	; 129
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	f9 01       	movw	r30, r18
 156:	10 82       	st	Z, r1

	// set COM0A and COM0B as PWM generation
	TCCR1A = (2 << COM0A0) | (2 << COM0B0);
 158:	e0 e8       	ldi	r30, 0x80	; 128
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 ea       	ldi	r24, 0xA0	; 160
 15e:	80 83       	st	Z, r24

	// set PB1 & PB2 as output
	DDRB |= (1 << PB1) | (1 << PB2);
 160:	84 b1       	in	r24, 0x04	; 4
 162:	86 60       	ori	r24, 0x06	; 6
 164:	84 b9       	out	0x04, r24	; 4

	// disable global interrupt for config 16bit registers
	u8Sreg = SREG;
 166:	9f b7       	in	r25, 0x3f	; 63
	CLI();
 168:	f8 94       	cli

	// set timer1 initial value as 0x0
	TCNT1H = 0x0;
 16a:	10 92 85 00 	sts	0x0085, r1
	TCNT1L = 0x0;
 16e:	10 92 84 00 	sts	0x0084, r1

	// set counter length as (ICR1 + 0x1) = 0x100
	ICR1H = 0x0;
 172:	10 92 87 00 	sts	0x0087, r1
	ICR1L = 0xff;
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	80 93 86 00 	sts	0x0086, r24

	// set duty cycle length as (OCR1B + 0x1) = 0x80
	OCR1BH = 0x0;
 17c:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = 0x7f;
 180:	8f e7       	ldi	r24, 0x7F	; 127
 182:	80 93 8a 00 	sts	0x008A, r24

	// restore SREG
	SREG = u8Sreg;
 186:	9f bf       	out	0x3f, r25	; 63

	// clear interrupt flag
	TIFR1 = (1 << TOV1) | (1 << OCF1A) | (1 << OCF1B) | (1 << ICF1);
 188:	87 e2       	ldi	r24, 0x27	; 39
 18a:	86 bb       	out	0x16, r24	; 22

	// enable timer0 overflow interrupt
	TIMSK1 = (1 << TOIE1);
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	80 93 6f 00 	sts	0x006F, r24

	// set dead time
	DTR1L = 0x3;
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	80 93 8c 00 	sts	0x008C, r24
	DTR1H = 0x2;
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	80 93 8d 00 	sts	0x008D, r24

	// enable deadtime mode
	TCCR1C = (1 << DTEN1);
 19e:	88 e0       	ldi	r24, 0x08	; 8
 1a0:	80 93 82 00 	sts	0x0082, r24

	// set WGM[1:0]
	TCCR1A |= (0x2 << WGM10);
 1a4:	80 81       	ld	r24, Z
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	80 83       	st	Z, r24

	// set WGM[3:2], DTEN and CS
	TCCR1B = (0x3 << WGM12) | (1 << CS00);
 1aa:	89 e1       	ldi	r24, 0x19	; 25
 1ac:	f9 01       	movw	r30, r18
 1ae:	80 83       	st	Z, r24

	// enable high speed mode
	TCKCSR |= (1 << TC2XS1);
 1b0:	8c 91       	ld	r24, X
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	8c 93       	st	X, r24

}
 1b6:	08 95       	ret

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
