
lgt8f328p_tc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000174  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  000001e8  2**0
                  ALLOC
  2 .debug_aranges 00000060  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a3  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001e4  00000000  00000000  000002eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000107  00000000  00000000  000004cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000289  00000000  00000000  000005d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000860  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d7  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 76 00 	call	0xec	; 0xec <main>
  88:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_9>:
// Enable Timer2 Overflow interrupt

// Change Duty Cycle through OCR2B

LGT_VECTOR(IVN_TC2_TOV)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	tov_cnt ++;
  9e:	80 91 00 01 	lds	r24, 0x0100
  a2:	90 91 01 01 	lds	r25, 0x0101
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	90 93 01 01 	sts	0x0101, r25
  ac:	80 93 00 01 	sts	0x0100, r24
	if ( tov_cnt == 0x03 )
  b0:	80 91 00 01 	lds	r24, 0x0100
  b4:	90 91 01 01 	lds	r25, 0x0101
  b8:	03 97       	sbiw	r24, 0x03	; 3
  ba:	89 f4       	brne	.+34     	; 0xde <__vector_9+0x4e>
	{
		tov_cnt = 0x0;
  bc:	10 92 01 01 	sts	0x0101, r1
  c0:	10 92 00 01 	sts	0x0100, r1
		dut_cyc ++;
  c4:	80 91 02 01 	lds	r24, 0x0102
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 02 01 	sts	0x0102, r24

		OCR2B = dut_cyc;
  ce:	80 91 02 01 	lds	r24, 0x0102
  d2:	80 93 b4 00 	sts	0x00B4, r24
		OCR2A = dut_cyc;
  d6:	80 91 02 01 	lds	r24, 0x0102
  da:	80 93 b3 00 	sts	0x00B3, r24
	}

}
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <main>:

#include "../inc/allinone.h"

int main(void)
{
	OSCCAL = 0xb0;
  ec:	80 eb       	ldi	r24, 0xB0	; 176
  ee:	80 93 66 00 	sts	0x0066, r24

	CLKPR = 0x81;
  f2:	81 e8       	ldi	r24, 0x81	; 129
  f4:	80 93 61 00 	sts	0x0061, r24
	CLKPR = 0x81;
  f8:	80 93 61 00 	sts	0x0061, r24

	tc2_init();
  fc:	0e 94 89 00 	call	0x112	; 0x112 <tc2_init>

	tov_cnt = 0x0;
 100:	10 92 01 01 	sts	0x0101, r1
 104:	10 92 00 01 	sts	0x0100, r1

	dut_cyc = 0x40;
 108:	80 e4       	ldi	r24, 0x40	; 64
 10a:	80 93 02 01 	sts	0x0102, r24

	// Global interrupt enable
	SEI();
 10e:	78 94       	sei
 110:	ff cf       	rjmp	.-2      	; 0x110 <main+0x24>

00000112 <tc2_init>:
// enable overflow interrupt to change duty cycle

void tc2_init(void)
{
	// select internal RC32K as asynchronous clock source
	ASSR |= (1 << INTCK);
 112:	80 91 b6 00 	lds	r24, 0x00B6
 116:	80 68       	ori	r24, 0x80	; 128
 118:	80 93 b6 00 	sts	0x00B6, r24

	// set asynchronous mode
	ASSR |= (1 << AS2);
 11c:	80 91 b6 00 	lds	r24, 0x00B6
 120:	80 62       	ori	r24, 0x20	; 32
 122:	80 93 b6 00 	sts	0x00B6, r24

	// stop timer2
	TCCR2B = 0x0;
 126:	10 92 b1 00 	sts	0x00B1, r1

	// set COM0A and COM0B as PWM generation
	TCCR2A = (2 << COM0A0) | (2 << COM0B0);
 12a:	80 ea       	ldi	r24, 0xA0	; 160
 12c:	80 93 b0 00 	sts	0x00B0, r24

	// set PB3 & PD3 as output
	DDRB |= (1 << PB3);
 130:	23 9a       	sbi	0x04, 3	; 4
	DDRD |= (1 << PD3);
 132:	53 9a       	sbi	0x0a, 3	; 10

	// set timer2 initial value as 0x0
	TCNT2 = 0x0;
 134:	10 92 b2 00 	sts	0x00B2, r1

	// set duty cycle length as (OCR2A + 0x1) = 0x80
	OCR2A = 0x7f;
 138:	8f e7       	ldi	r24, 0x7F	; 127
 13a:	80 93 b3 00 	sts	0x00B3, r24

	// set duty cycle length as (OCR2B + 0x1) = 0x40
	OCR2B = 0x3f;
 13e:	8f e3       	ldi	r24, 0x3F	; 63
 140:	80 93 b4 00 	sts	0x00B4, r24

	// clear interrupt flag
	TIFR2 = (1 << TOV2) | (1 << OCF2A) | (1 << OCF2B);
 144:	87 e0       	ldi	r24, 0x07	; 7
 146:	87 bb       	out	0x17, r24	; 23

	// enable timer0 overflow interrupt
	TIMSK2 = (1 << TOIE2);
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 70 00 	sts	0x0070, r24

	// set WGM[1:0]
	while(ASSR & (1 << TCR2AUB));
 14e:	80 91 b6 00 	lds	r24, 0x00B6
 152:	81 fd       	sbrc	r24, 1
 154:	fc cf       	rjmp	.-8      	; 0x14e <tc2_init+0x3c>
	TCCR2A |= (0x3 << WGM20);
 156:	80 91 b0 00 	lds	r24, 0x00B0
 15a:	83 60       	ori	r24, 0x03	; 3
 15c:	80 93 b0 00 	sts	0x00B0, r24

	// clr WGM[2], and CS
	while(ASSR & (1 << TCR2BUB));
 160:	80 91 b6 00 	lds	r24, 0x00B6
 164:	80 fd       	sbrc	r24, 0
 166:	fc cf       	rjmp	.-8      	; 0x160 <tc2_init+0x4e>
	TCCR2B = (0 << WGM22) | (1 << CS20);
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 b1 00 	sts	0x00B1, r24
}
 16e:	08 95       	ret

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
