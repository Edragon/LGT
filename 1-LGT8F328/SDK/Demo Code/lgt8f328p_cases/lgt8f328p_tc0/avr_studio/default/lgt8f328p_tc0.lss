
lgt8f328p_tc0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  000001d2  2**0
                  ALLOC
  2 .debug_aranges 00000060  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a4  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001e4  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000107  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000279  00000000  00000000  000005c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  0000083c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d8  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 67 00 	call	0xce	; 0xce <main>
  88:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <tc0_init>:
// enable overflow interrupt to change duty cycle

void tc0_init(void)
{
	// enable high speed clock
	TCKCSR = (1 << F2XEN);
  90:	ec ee       	ldi	r30, 0xEC	; 236
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	80 83       	st	Z, r24

	// stop timer0
	TCCR0B = 0x0;
  98:	15 bc       	out	0x25, r1	; 37

	// set COM0A and COM0B as PWM generation
	TCCR0A = (2 << COM0A0) | (2 << COM0B0);
  9a:	80 ea       	ldi	r24, 0xA0	; 160
  9c:	84 bd       	out	0x24, r24	; 36

	// set PD5 & PD6 as output
	DDRD |= (1 << PD5) | (1 << PD6);
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	80 66       	ori	r24, 0x60	; 96
  a2:	8a b9       	out	0x0a, r24	; 10

	// set timer0 initial value as 0x0
	TCNT0 = 0x0;
  a4:	16 bc       	out	0x26, r1	; 38

	// set counter length as (OCR0A + 0x1) = 0x80
	OCR0A = 0x7f;
  a6:	8f e7       	ldi	r24, 0x7F	; 127
  a8:	87 bd       	out	0x27, r24	; 39

	// set duty cycle length as (OCR0B + 0x1) = 0x40
	OCR0B = 0x3f;
  aa:	8f e3       	ldi	r24, 0x3F	; 63
  ac:	88 bd       	out	0x28, r24	; 40

	// clear interrupt flag
	TIFR0 = (1 << TOV0) | (1 << OCF0A) | (1 << OCF0B);
  ae:	87 e0       	ldi	r24, 0x07	; 7
  b0:	85 bb       	out	0x15, r24	; 21

	// enable timer0 overflow interrupt
	TIMSK0 = (1 << TOIE0);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 6e 00 	sts	0x006E, r24

	// set dead time
	DTR0 = (0x2 << 0x4) | (0x3 << 0x0);
  b8:	83 e2       	ldi	r24, 0x23	; 35
  ba:	8f bd       	out	0x2f, r24	; 47

	// set WGM[1:0]
	TCCR0A |= (0x3 << WGM00);
  bc:	84 b5       	in	r24, 0x24	; 36
  be:	83 60       	ori	r24, 0x03	; 3
  c0:	84 bd       	out	0x24, r24	; 36

	// set WGM[2], DTEN and CS
	TCCR0B = (1 << WGM02) | (1 << DTEN0) | (1 << CS00);
  c2:	89 e1       	ldi	r24, 0x19	; 25
  c4:	85 bd       	out	0x25, r24	; 37

	// enable high speed mode
	TCKCSR |= (1 << TC2XS0);
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

}
  cc:	08 95       	ret

000000ce <main>:

#include "../inc/allinone.h"

int main(void)
{
	OSCCAL = 0xb0;
  ce:	80 eb       	ldi	r24, 0xB0	; 176
  d0:	80 93 66 00 	sts	0x0066, r24

	CLKPR = 0x81;
  d4:	81 e8       	ldi	r24, 0x81	; 129
  d6:	80 93 61 00 	sts	0x0061, r24
	CLKPR = 0x81;
  da:	80 93 61 00 	sts	0x0061, r24

	tc0_init();
  de:	0e 94 48 00 	call	0x90	; 0x90 <tc0_init>

	tov_cnt = 0x0;
  e2:	10 92 01 01 	sts	0x0101, r1
  e6:	10 92 00 01 	sts	0x0100, r1

	dut_cyc = 0x40;
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	80 93 02 01 	sts	0x0102, r24

	// Global interrupt enable
	SEI();
  f0:	78 94       	sei
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <main+0x24>

000000f4 <__vector_16>:
// Enable Timer0 Overflow interrupt

// Change Duty Cycle through OCR0B

LGT_VECTOR(IVN_TC0_TOV)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
	tov_cnt ++;
 104:	80 91 00 01 	lds	r24, 0x0100
 108:	90 91 01 01 	lds	r25, 0x0101
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	90 93 01 01 	sts	0x0101, r25
 112:	80 93 00 01 	sts	0x0100, r24
	if ( tov_cnt == 0xbff )
 116:	80 91 00 01 	lds	r24, 0x0100
 11a:	90 91 01 01 	lds	r25, 0x0101
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	9b 40       	sbci	r25, 0x0B	; 11
 122:	99 f4       	brne	.+38     	; 0x14a <__vector_16+0x56>
	{
		tov_cnt = 0x0;
 124:	10 92 01 01 	sts	0x0101, r1
 128:	10 92 00 01 	sts	0x0100, r1
		dut_cyc ++;
 12c:	80 91 02 01 	lds	r24, 0x0102
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 02 01 	sts	0x0102, r24
		if (dut_cyc > 0x7c) dut_cyc = 0x3;
 136:	80 91 02 01 	lds	r24, 0x0102
 13a:	8d 37       	cpi	r24, 0x7D	; 125
 13c:	18 f0       	brcs	.+6      	; 0x144 <__vector_16+0x50>
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	80 93 02 01 	sts	0x0102, r24

		OCR0B = dut_cyc;
 144:	80 91 02 01 	lds	r24, 0x0102
 148:	88 bd       	out	0x28, r24	; 40
	}

}
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
