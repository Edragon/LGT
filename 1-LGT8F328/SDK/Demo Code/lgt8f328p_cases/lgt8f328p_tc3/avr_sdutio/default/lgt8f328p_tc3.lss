
lgt8f328p_tc3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  0000025c  2**0
                  ALLOC
  2 .debug_aranges 00000080  00000000  00000000  00000260  2**3
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a4  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000025d  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000012c  00000000  00000000  000005e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000030c  00000000  00000000  0000070d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000df  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  #define XCALL rcall
#endif

.section .vectors,"ax",@progbits
	.weak __vector_26
	XJMP  __vector_26
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
	.weak __vector_27
	XJMP  __vector_27
  6c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
	.weak __vector_28
	XJMP  __vector_28
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
	.weak __vector_29
	XJMP  __vector_29
  74:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_29>
	.weak __vector_30
	XJMP  __vector_30
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
	.weak __vector_31
	XJMP  __vector_31
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_clear_bss>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e0       	ldi	r26, 0x00	; 0
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a4 30       	cpi	r26, 0x04	; 4
  98:	b1 07       	cpc	r27, r17
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>
  9c:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  a0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <__vector_29>:
// Enable Timer1 Overflow interrupt

// Change Duty Cycle through OCR3A, OCR3B and OCR3C

LGT_VECTOR(IVN_TC3)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
	tov_cnt ++;
  b8:	80 91 00 01 	lds	r24, 0x0100
  bc:	90 91 01 01 	lds	r25, 0x0101
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	90 93 01 01 	sts	0x0101, r25
  c6:	80 93 00 01 	sts	0x0100, r24
	if ( tov_cnt == 0x7ff )
  ca:	80 91 00 01 	lds	r24, 0x0100
  ce:	90 91 01 01 	lds	r25, 0x0101
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	97 40       	sbci	r25, 0x07	; 7
  d6:	e9 f5       	brne	.+122    	; 0x152 <__vector_29+0xaa>
	{
		tov_cnt = 0x0;
  d8:	10 92 01 01 	sts	0x0101, r1
  dc:	10 92 00 01 	sts	0x0100, r1
		dut_cyc ++;
  e0:	80 91 02 01 	lds	r24, 0x0102
  e4:	90 91 03 01 	lds	r25, 0x0103
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	90 93 03 01 	sts	0x0103, r25
  ee:	80 93 02 01 	sts	0x0102, r24

		if (dut_cyc > 0xff) dut_cyc = 0x0;
  f2:	80 91 02 01 	lds	r24, 0x0102
  f6:	90 91 03 01 	lds	r25, 0x0103
  fa:	8f 3f       	cpi	r24, 0xFF	; 255
  fc:	91 05       	cpc	r25, r1
  fe:	29 f0       	breq	.+10     	; 0x10a <__vector_29+0x62>
 100:	20 f0       	brcs	.+8      	; 0x10a <__vector_29+0x62>
 102:	10 92 03 01 	sts	0x0103, r1
 106:	10 92 02 01 	sts	0x0102, r1

		OCR3AH = dut_cyc >> 8;
 10a:	80 91 02 01 	lds	r24, 0x0102
 10e:	90 91 03 01 	lds	r25, 0x0103
 112:	90 93 99 00 	sts	0x0099, r25
		OCR3AL = dut_cyc;
 116:	80 91 02 01 	lds	r24, 0x0102
 11a:	90 91 03 01 	lds	r25, 0x0103
 11e:	80 93 98 00 	sts	0x0098, r24

		OCR3BH = dut_cyc >> 8;
 122:	80 91 02 01 	lds	r24, 0x0102
 126:	90 91 03 01 	lds	r25, 0x0103
 12a:	90 93 9b 00 	sts	0x009B, r25
		OCR3BL = dut_cyc;
 12e:	80 91 02 01 	lds	r24, 0x0102
 132:	90 91 03 01 	lds	r25, 0x0103
 136:	80 93 9a 00 	sts	0x009A, r24

		OCR3CH = dut_cyc >> 8;
 13a:	80 91 02 01 	lds	r24, 0x0102
 13e:	90 91 03 01 	lds	r25, 0x0103
 142:	90 93 9f 00 	sts	0x009F, r25
		OCR3CL = dut_cyc;
 146:	80 91 02 01 	lds	r24, 0x0102
 14a:	90 91 03 01 	lds	r25, 0x0103
 14e:	80 93 9e 00 	sts	0x009E, r24
	}

}
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	2f 91       	pop	r18
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <main>:

#include "../inc/allinone.h"

int main(void)
{
	OSCCAL = 0xb0;
 162:	80 eb       	ldi	r24, 0xB0	; 176
 164:	80 93 66 00 	sts	0x0066, r24

	CLKPR = 0x81;
 168:	81 e8       	ldi	r24, 0x81	; 129
 16a:	80 93 61 00 	sts	0x0061, r24
	CLKPR = 0x81;
 16e:	80 93 61 00 	sts	0x0061, r24

	tc3_init();
 172:	0e 94 c7 00 	call	0x18e	; 0x18e <tc3_init>

	tov_cnt = 0x0;
 176:	10 92 01 01 	sts	0x0101, r1
 17a:	10 92 00 01 	sts	0x0100, r1

	dut_cyc = 0x40;
 17e:	80 e4       	ldi	r24, 0x40	; 64
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 03 01 	sts	0x0103, r25
 186:	80 93 02 01 	sts	0x0102, r24

	// Global interrupt enable
	SEI();
 18a:	78 94       	sei
 18c:	ff cf       	rjmp	.-2      	; 0x18c <main+0x2a>

0000018e <tc3_init>:
void tc3_init(void)
{
	unsigned char u8Sreg;

	// stop timer3
	TCCR3B = 0x0;
 18e:	a1 e9       	ldi	r26, 0x91	; 145
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	1c 92       	st	X, r1

	// set COM3A and COM3B as PWM generation
	TCCR3A = (2 << COM3A0) | (2 << COM3B0) | (2 << COM3C0);
 194:	e0 e9       	ldi	r30, 0x90	; 144
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	88 ea       	ldi	r24, 0xA8	; 168
 19a:	80 83       	st	Z, r24

	// set PF1 & PF2 as output
	DDRF |= (1 << PF1) | (1 << PF2) | (1 << PF3);
 19c:	83 b3       	in	r24, 0x13	; 19
 19e:	8e 60       	ori	r24, 0x0E	; 14
 1a0:	83 bb       	out	0x13, r24	; 19

	// disable global interrupt for config 16bit registers
	u8Sreg = SREG;
 1a2:	9f b7       	in	r25, 0x3f	; 63
	CLI();
 1a4:	f8 94       	cli

	// set timer3 initial value as 0x0
	TCNT3H = 0x0;
 1a6:	10 92 95 00 	sts	0x0095, r1
	TCNT3L = 0x0;
 1aa:	10 92 94 00 	sts	0x0094, r1

	// set counter length as (ICR3 + 0x1) = 0x100
	ICR3H = 0x0;
 1ae:	10 92 97 00 	sts	0x0097, r1
	ICR3L = 0xff;
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	80 93 96 00 	sts	0x0096, r24

	// set duty cycle length as (OCR3B + 0x1) = 0x80
	OCR3BH = 0x0;
 1b8:	10 92 9b 00 	sts	0x009B, r1
	OCR3BL = 0x7f;
 1bc:	8f e7       	ldi	r24, 0x7F	; 127
 1be:	80 93 9a 00 	sts	0x009A, r24

	// set duty cycle length as (OCR3C + 0x1) = 0x40
	OCR3CH = 0x0;
 1c2:	10 92 9f 00 	sts	0x009F, r1
	OCR3CL = 0x3f;
 1c6:	8f e3       	ldi	r24, 0x3F	; 63
 1c8:	80 93 9e 00 	sts	0x009E, r24

	// restore SREG
	SREG = u8Sreg;
 1cc:	9f bf       	out	0x3f, r25	; 63

	// clear interrupt flag
	TIFR3 = (1 << TOV3) | (1 << OCF3A) | (1 << OCF3B) | (1 << ICF3) | (1 << OCF3C);
 1ce:	8f e2       	ldi	r24, 0x2F	; 47
 1d0:	88 bb       	out	0x18, r24	; 24

	// enable timer0 overflow interrupt
	TIMSK3 = (1 << TOIE3);
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	80 93 71 00 	sts	0x0071, r24

	// set WGM[1:0]
	TCCR3A |= (0x2 << WGM30);
 1d8:	80 81       	ld	r24, Z
 1da:	82 60       	ori	r24, 0x02	; 2
 1dc:	80 83       	st	Z, r24

	// set WGM[3:2] and CS
	TCCR3B = (0x3 << WGM32) | (1 << CS30);
 1de:	89 e1       	ldi	r24, 0x19	; 25
 1e0:	8c 93       	st	X, r24
}
 1e2:	08 95       	ret

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
